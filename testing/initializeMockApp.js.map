{"version":3,"sources":["../../src/testing/initializeMockApp.js"],"names":["configure","configureAnalytics","MockAnalyticsService","configureI18n","configureLogging","MockLoggingService","configureAuth","MockAuthService","getConfig","mockMessages","initializeMockApp","messages","authenticatedUser","loggingService","config","authService","analyticsService","httpClient","getAuthenticatedHttpClient"],"mappings":";;;;;;AAAA,SAASA,SAAS,IAAIC,kBAAtB,EAA0CC,oBAA1C,QAAsE,cAAtE;AACA,SAASF,SAAS,IAAIG,aAAtB,QAA2C,SAA3C;AACA,SAASH,SAAS,IAAII,gBAAtB,EAAwCC,kBAAxC,QAAkE,YAAlE;AACA,SAASL,SAAS,IAAIM,aAAtB,EAAqCC,eAArC,QAA4D,SAA5D;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,iBAAT,GAGP;AAAA,iFAAJ,EAAI;AAAA,2BAFNC,QAEM;AAAA,MAFNA,QAEM,8BAFKF,YAEL;AAAA,mCADNG,iBACM;AAAA,MADNA,iBACM,sCADc,IACd;;AACN,MAAMC,cAAc,GAAGT,gBAAgB,CAACC,kBAAD,EAAqB;AAC1DS,IAAAA,MAAM,EAAEN,SAAS;AADyC,GAArB,CAAvC;AAIA,MAAMO,WAAW,GAAGT,aAAa,CAACC,eAAD,EAAkB;AACjDO,IAAAA,MAAM,kCAAON,SAAS,EAAhB;AAAoBI,MAAAA,iBAAiB,EAAjBA;AAApB,MAD2C;AAEjDC,IAAAA,cAAc,EAAdA;AAFiD,GAAlB,CAAjC;AAKA,MAAMG,gBAAgB,GAAGf,kBAAkB,CAACC,oBAAD,EAAuB;AAChEY,IAAAA,MAAM,EAAEN,SAAS,EAD+C;AAEhES,IAAAA,UAAU,EAAEF,WAAW,CAACG,0BAAZ,EAFoD;AAGhEL,IAAAA,cAAc,EAAdA;AAHgE,GAAvB,CAA3C,CAVM,CAgBN;;AACAV,EAAAA,aAAa,CAAC;AACZW,IAAAA,MAAM,EAAEN,SAAS,EADL;AAEZK,IAAAA,cAAc,EAAdA,cAFY;AAGZF,IAAAA,QAAQ,EAARA;AAHY,GAAD,CAAb;AAMA,SAAO;AACLK,IAAAA,gBAAgB,EAAhBA,gBADK;AAELD,IAAAA,WAAW,EAAXA,WAFK;AAGLF,IAAAA,cAAc,EAAdA;AAHK,GAAP;AAKD","sourcesContent":["import { configure as configureAnalytics, MockAnalyticsService } from '../analytics';\nimport { configure as configureI18n } from '../i18n';\nimport { configure as configureLogging, MockLoggingService } from '../logging';\nimport { configure as configureAuth, MockAuthService } from '../auth';\nimport { getConfig } from '../config';\nimport mockMessages from './mockMessages';\n\n/**\n * Initializes a mock application for component testing. The mock application includes\n * mock analytics, auth, and logging services, and the real i18n service.\n *\n * See MockAnalyticsService, MockAuthService, and MockLoggingService for mock implementation\n * details. For the most part, the analytics and logging services just implement their functions\n * with jest.fn() and do nothing else, whereas the MockAuthService actually has some behavior\n * implemented, it just doesn't make any HTTP calls.\n *\n * Note that this mock application is not sufficient for testing the full application lifecycle or\n * initialization callbacks/custom handlers as described in the 'initialize' function's\n * documentation. It exists merely to set up the mock services that components themselves tend to\n * interact with most often. It could be extended to allow for setting up custom handlers fairly\n * easily, as this functionality would be more-or-less identical to what the real initialize\n * function does.\n *\n * Example:\n *\n * ```\n * import { initializeMockApp } from '@edx/frontend-platform/testing';\n * import { logInfo } from '@edx/frontend-platform/logging';\n *\n * describe('initializeMockApp', () => {\n *   it('mocks things correctly', () => {\n *     const { loggingService } = initializeMockApp();\n *     logInfo('test', {});\n *     expect(loggingService.logInfo).toHaveBeenCalledWith('test', {});\n *   });\n * });\n * ```\n *\n * @param {Object} [options]\n * @param {*} [options.messages] A i18n-compatible messages object, or an array of such objects. If\n * an array is provided, duplicate keys are resolved with the last-one-in winning.\n * @param {UserData|null} [options.authenticatedUser] A UserData object representing the\n * authenticated user. This is passed directly to MockAuthService.\n * @memberof module:Testing\n */\nexport default function initializeMockApp({\n  messages = mockMessages,\n  authenticatedUser = null,\n} = {}) {\n  const loggingService = configureLogging(MockLoggingService, {\n    config: getConfig(),\n  });\n\n  const authService = configureAuth(MockAuthService, {\n    config: { ...getConfig(), authenticatedUser },\n    loggingService,\n  });\n\n  const analyticsService = configureAnalytics(MockAnalyticsService, {\n    config: getConfig(),\n    httpClient: authService.getAuthenticatedHttpClient(),\n    loggingService,\n  });\n\n  // The i18n service configure function has no return value, since there isn't a service class.\n  configureI18n({\n    config: getConfig(),\n    loggingService,\n    messages,\n  });\n\n  return {\n    analyticsService,\n    authService,\n    loggingService,\n  };\n}\n"],"file":"initializeMockApp.js"}