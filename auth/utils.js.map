{"version":3,"sources":["../../src/auth/utils.js"],"names":["urlRegex","getUrlParts","url","found","match","fullUrl","protocol","domain","path","endFilename","endFileExtension","query","hash","e","Error","logFrontendAuthError","loggingService","error","prefixedMessageError","Object","create","message","logError","customAttributes","processAxiosError","axiosErrorObject","request","response","config","httpErrorType","httpErrorRequestUrl","httpErrorRequestMethod","method","status","data","stringifiedData","JSON","stringify","responseIsHTML","includes","httpErrorResponseData","httpErrorStatus","httpErrorMessage","processAxiosErrorAndThrow"],"mappings":"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","sourcesContent":["// Lifted from here: https://regexr.com/3ok5o\nconst urlRegex = /([a-z]{1,2}tps?):\\/\\/((?:(?!(?:\\/|#|\\?|&)).)+)(?:(\\/(?:(?:(?:(?!(?:#|\\?|&)).)+\\/))?))?(?:((?:(?!(?:\\.|$|\\?|#)).)+))?(?:(\\.(?:(?!(?:\\?|$|#)).)+))?(?:(\\?(?:(?!(?:$|#)).)+))?(?:(#.+))?/;\nconst getUrlParts = (url) => {\n  const found = url.match(urlRegex);\n  try {\n    const [\n      fullUrl,\n      protocol,\n      domain,\n      path,\n      endFilename,\n      endFileExtension,\n      query,\n      hash,\n    ] = found;\n\n    return {\n      fullUrl,\n      protocol,\n      domain,\n      path,\n      endFilename,\n      endFileExtension,\n      query,\n      hash,\n    };\n  } catch (e) {\n    throw new Error(`Could not find url parts from ${url}.`);\n  }\n};\n\nconst logFrontendAuthError = (loggingService, error) => {\n  const prefixedMessageError = Object.create(error);\n  prefixedMessageError.message = `[frontend-auth] ${error.message}`;\n  loggingService.logError(prefixedMessageError, prefixedMessageError.customAttributes);\n};\n\nconst processAxiosError = (axiosErrorObject) => {\n  const error = Object.create(axiosErrorObject);\n  const { request, response, config } = error;\n\n  if (!config) {\n    error.customAttributes = {\n      ...error.customAttributes,\n      httpErrorType: 'unknown-api-request-error',\n    };\n    return error;\n  }\n\n  const {\n    url: httpErrorRequestUrl,\n    method: httpErrorRequestMethod,\n  } = config;\n  /* istanbul ignore else: difficult to enter the request-only error case in a unit test */\n  if (response) {\n    const { status, data } = response;\n    const stringifiedData = JSON.stringify(data) || '(empty response)';\n    const responseIsHTML = stringifiedData.includes('<!DOCTYPE html>');\n    // Don't include data if it is just an HTML document, like a 500 error page.\n    /* istanbul ignore next */\n    const httpErrorResponseData = responseIsHTML ? '<Response is HTML>' : stringifiedData;\n    error.customAttributes = {\n      ...error.customAttributes,\n      httpErrorType: 'api-response-error',\n      httpErrorStatus: status,\n      httpErrorResponseData,\n      httpErrorRequestUrl,\n      httpErrorRequestMethod,\n    };\n    error.message = `Axios Error (Response): ${status} ${httpErrorRequestUrl} ${httpErrorResponseData}`;\n  } else if (request) {\n    error.customAttributes = {\n      ...error.customAttributes,\n      httpErrorType: 'api-request-error',\n      httpErrorMessage: error.message,\n      httpErrorRequestUrl,\n      httpErrorRequestMethod,\n    };\n    // This case occurs most likely because of intermittent internet connection issues\n    // but it also, though less often, catches CORS or server configuration problems.\n    error.message = `Axios Error (Request): ${error.message} (possible local connectivity issue) ${httpErrorRequestMethod} ${httpErrorRequestUrl}`;\n  } else {\n    error.customAttributes = {\n      ...error.customAttributes,\n      httpErrorType: 'api-request-config-error',\n      httpErrorMessage: error.message,\n      httpErrorRequestUrl,\n      httpErrorRequestMethod,\n    };\n    error.message = `Axios Error (Config): ${error.message} ${httpErrorRequestMethod} ${httpErrorRequestUrl}`;\n  }\n\n  return error;\n};\n\nconst processAxiosErrorAndThrow = (axiosErrorObject) => {\n  throw processAxiosError(axiosErrorObject);\n};\n\nexport {\n  getUrlParts,\n  logFrontendAuthError,\n  processAxiosError,\n  processAxiosErrorAndThrow,\n};\n"],"file":"utils.js"}