{"version":3,"sources":["../../src/auth/MockAuthService.js"],"names":["axios","PropTypes","ensureDefinedConfig","userPropTypes","shape","userId","string","isRequired","username","roles","arrayOf","administrator","optionsPropTypes","config","BASE_URL","LMS_BASE_URL","LOGIN_URL","LOGOUT_URL","REFRESH_ACCESS_TOKEN_ENDPOINT","ACCESS_TOKEN_COOKIE_NAME","CSRF_TOKEN_API_PATH","loggingService","logError","func","logInfo","authenticatedUser","hydratedAuthenticatedUser","MockAuthService","options","jest","fn","authenticatedHttpClient","httpClient","redirectUrl","encodeURIComponent","getLoginRedirectUrl","getLogoutRedirectUrl","authUser","getAuthenticatedUser","fetchAuthenticatedUser","redirectToLogin","user","setAuthenticatedUser","checkPropTypes","create"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,mBAAT,QAAoC,UAApC;AAEA,IAAMC,aAAa,GAAGF,SAAS,CAACG,KAAV,CAAgB;AACpCC,EAAAA,MAAM,EAAEJ,SAAS,CAACK,MAAV,CAAiBC,UADW;AAEpCC,EAAAA,QAAQ,EAAEP,SAAS,CAACK,MAAV,CAAiBC,UAFS;AAGpCE,EAAAA,KAAK,EAAER,SAAS,CAACS,OAAV,CAAkBT,SAAS,CAACK,MAA5B,CAH6B;AAIpCK,EAAAA,aAAa,EAAEV,SAAS;AAJY,CAAhB,CAAtB;AAOA,IAAMW,gBAAgB,GAAG;AACvBC,EAAAA,MAAM,EAAEZ,SAAS,CAACG,KAAV,CAAgB;AACtBU,IAAAA,QAAQ,EAAEb,SAAS,CAACK,MAAV,CAAiBC,UADL;AAEtBQ,IAAAA,YAAY,EAAEd,SAAS,CAACK,MAAV,CAAiBC,UAFT;AAGtBS,IAAAA,SAAS,EAAEf,SAAS,CAACK,MAAV,CAAiBC,UAHN;AAItBU,IAAAA,UAAU,EAAEhB,SAAS,CAACK,MAAV,CAAiBC,UAJP;AAKtBW,IAAAA,6BAA6B,EAAEjB,SAAS,CAACK,MAAV,CAAiBC,UAL1B;AAMtBY,IAAAA,wBAAwB,EAAElB,SAAS,CAACK,MAAV,CAAiBC,UANrB;AAOtBa,IAAAA,mBAAmB,EAAEnB,SAAS,CAACK,MAAV,CAAiBC;AAPhB,GAAhB,EAQLA,UAToB;AAUvBc,EAAAA,cAAc,EAAEpB,SAAS,CAACG,KAAV,CAAgB;AAC9BkB,IAAAA,QAAQ,EAAErB,SAAS,CAACsB,IAAV,CAAehB,UADK;AAE9BiB,IAAAA,OAAO,EAAEvB,SAAS,CAACsB,IAAV,CAAehB;AAFM,GAAhB,EAGbA,UAboB;AAcvB;AACAkB,EAAAA,iBAAiB,EAAEtB,aAfI;AAgBvB;AACAuB,EAAAA,yBAAyB,EAAEvB;AAjBJ,CAAzB;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMwB,e;AACJ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,yBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AAAA,sDA4BQC,IAAI,CAACC,EAAL,CAAQ;AAAA,WAAM,KAAI,CAACC,uBAAX;AAAA,GAAR,CA5BR;;AAAA,yCAsCLF,IAAI,CAACC,EAAL,CAAQ;AAAA,WAAM,KAAI,CAACE,UAAX;AAAA,GAAR,CAtCK;;AAAA,+CAoDCH,IAAI,CAACC,EAAL,CACpB;AAAA,QAACG,WAAD,uEAAe,KAAI,CAACpB,MAAL,CAAYC,QAA3B;AAAA,qBAA2C,KAAI,CAACD,MAAL,CAAYG,SAAvD,mBAAyEkB,kBAAkB,CAACD,WAAD,CAA3F;AAAA,GADoB,CApDD;;AAAA,2CA+DHJ,IAAI,CAACC,EAAL,CAAQ,YAAwC;AAAA,QAAvCG,WAAuC,uEAAzB,KAAI,CAACpB,MAAL,CAAYC,QAAa;;AAChE;AACA,IAAA,KAAI,CAACqB,mBAAL,CAAyBF,WAAzB;AACD,GAHiB,CA/DG;;AAAA,gDAgFEJ,IAAI,CAACC,EAAL,CAAQ;AAAA,QAACG,WAAD,uEAAe,KAAI,CAACpB,MAAL,CAAYC,QAA3B;AAAA,qBAA2C,KAAI,CAACD,MAAL,CAAYI,UAAvD,2BAAkFiB,kBAAkB,CAACD,WAAD,CAApG;AAAA,GAAR,CAhFF;;AAAA,4CAyFFJ,IAAI,CAACC,EAAL,CAAQ,YAAwC;AAAA,QAAvCG,WAAuC,uEAAzB,KAAI,CAACpB,MAAL,CAAYC,QAAa;;AACjE;AACA,IAAA,KAAI,CAACsB,oBAAL,CAA0BH,WAA1B;AACD,GAHkB,CAzFE;;AAAA,gDAsGEJ,IAAI,CAACC,EAAL,CAAQ;AAAA,WAAM,KAAI,CAACL,iBAAX;AAAA,GAAR,CAtGF;;AAAA,gDA+GEI,IAAI,CAACC,EAAL,CAAQ,UAACO,QAAD,EAAc;AAC3C,IAAA,KAAI,CAACZ,iBAAL,GAAyBY,QAAzB;AACD,GAFsB,CA/GF;;AAAA,kDA6HIR,IAAI,CAACC,EAAL,CAAQ;AAAA,WAAM,KAAI,CAACQ,oBAAL,EAAN;AAAA,GAAR,CA7HJ;;AAAA,mDAyIKT,IAAI,CAACC,EAAL,CAAQ,YAAwC;AAAA,QAAvCG,WAAuC,uEAAzB,KAAI,CAACpB,MAAL,CAAYC,QAAa;;AACxE,IAAA,KAAI,CAACyB,sBAAL;;AAEA,QAAI,KAAI,CAACD,oBAAL,OAAgC,IAApC,EAA0C;AACxC;AACA,MAAA,KAAI,CAACE,eAAL,CAAqBP,WAArB;AACD;;AAED,WAAO,KAAI,CAACK,oBAAL,EAAP;AACD,GATyB,CAzIL;;AAAA,oDAoKMT,IAAI,CAACC,EAAL,CAAQ,YAAM;AACvC,QAAMW,IAAI,GAAG,KAAI,CAACH,oBAAL,EAAb;;AACA,QAAIG,IAAI,KAAK,IAAb,EAAmB;AACjB,MAAA,KAAI,CAACC,oBAAL,iCAA+BD,IAA/B,GAAwC,KAAI,CAACf,yBAA7C;AACD;AACF,GAL0B,CApKN;;AACnB,OAAKK,uBAAL,GAA+B,IAA/B;AACA,OAAKC,UAAL,GAAkB,IAAlB;AAEA9B,EAAAA,mBAAmB,CAAC0B,OAAD,EAAU,aAAV,CAAnB;AACA3B,EAAAA,SAAS,CAAC0C,cAAV,CAAyB/B,gBAAzB,EAA2CgB,OAA3C,EAAoD,SAApD,EAA+D,aAA/D;AAEA,OAAKf,MAAL,GAAce,OAAO,CAACf,MAAtB;AACA,OAAKQ,cAAL,GAAsBO,OAAO,CAACP,cAA9B,CARmB,CAUnB;;AACA,OAAKI,iBAAL,GAAyB,KAAKZ,MAAL,CAAYY,iBAAZ,GAAgC,KAAKZ,MAAL,CAAYY,iBAA5C,GAAgE,IAAzF;AACA,OAAKC,yBAAL,GAAiC,KAAKb,MAAL,CAAYa,yBAAZ,GAC7B,KAAKb,MAAL,CAAYa,yBADiB,GAE7B,EAFJ;AAIA,OAAKK,uBAAL,GAA+B/B,KAAK,CAAC4C,MAAN,EAA/B;AACA,OAAKZ,UAAL,GAAkBhC,KAAK,CAAC4C,MAAN,EAAlB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAiJA,eAAejB,eAAf","sourcesContent":["import axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { ensureDefinedConfig } from '../utils';\n\nconst userPropTypes = PropTypes.shape({\n  userId: PropTypes.string.isRequired,\n  username: PropTypes.string.isRequired,\n  roles: PropTypes.arrayOf(PropTypes.string),\n  administrator: PropTypes.boolean,\n});\n\nconst optionsPropTypes = {\n  config: PropTypes.shape({\n    BASE_URL: PropTypes.string.isRequired,\n    LMS_BASE_URL: PropTypes.string.isRequired,\n    LOGIN_URL: PropTypes.string.isRequired,\n    LOGOUT_URL: PropTypes.string.isRequired,\n    REFRESH_ACCESS_TOKEN_ENDPOINT: PropTypes.string.isRequired,\n    ACCESS_TOKEN_COOKIE_NAME: PropTypes.string.isRequired,\n    CSRF_TOKEN_API_PATH: PropTypes.string.isRequired,\n  }).isRequired,\n  loggingService: PropTypes.shape({\n    logError: PropTypes.func.isRequired,\n    logInfo: PropTypes.func.isRequired,\n  }).isRequired,\n  // The absence of authenticatedUser means the user is anonymous.\n  authenticatedUser: userPropTypes,\n  // Must be at least a valid user, but may have other fields.\n  hydratedAuthenticatedUser: userPropTypes,\n};\n\n/**\n * The MockAuthService class mocks authenticated user-fetching logic and allows for manually\n * setting user data.  It is compatible with axios-mock-adapter to wrap its HttpClients so that\n * they can be mocked for testing.\n *\n * It wraps all methods of the service with Jest mock functions (jest.fn()).  This allows test code\n * to assert expectations on all functions of the service while preserving sensible behaviors.  For\n * instance, the login/logout methods related to redirecting maintain their real behavior.\n *\n * This service is NOT suitable for use in an application itself - only tests.  It depends on Jest,\n * which should only be a dev dependency of your project.  You don't want to pull the entire suite\n * of test dependencies into your application at runtime, probably even in your dev server.\n *\n * In a test where you would like to mock out API requests - perhaps from a redux-thunk function -\n * you could do the following to set up a MockAuthService for your test:\n *\n * ```\n * import { getConfig, mergeConfig } from '@edx/frontend-platform';\n * import { configure, MockAuthService } from '@edx/frontend-platform/auth';\n * import MockAdapter from 'axios-mock-adapter';\n *\n * const mockLoggingService = {\n *   logInfo: jest.fn(),\n *   logError: jest.fn(),\n * };\n * mergeConfig({\n *   authenticatedUser: {\n *     userId: 'abc123',\n *     username: 'Mock User',\n *     roles: [],\n *     administrator: false,\n *   },\n * });\n * configure(MockAuthService, { config: getConfig(), loggingService: mockLoggingService });\n * const mockAdapter = new MockAdapter(getAuthenticatedHttpClient());\n * // Mock calls for your tests.  This configuration can be done in any sort of test setup.\n * mockAdapter.onGet(...);\n * ```\n *\n * Also see the `initializeMockApp` function which also automatically uses mock services for\n * Logging and Analytics.\n *\n * @implements {AuthService}\n * @memberof module:Auth\n */\nclass MockAuthService {\n  /**\n   * @param {Object} options\n   * @param {Object} options.config\n   * @param {string} options.config.BASE_URL\n   * @param {string} options.config.LMS_BASE_URL\n   * @param {string} options.config.LOGIN_URL\n   * @param {string} options.config.LOGOUT_URL\n   * @param {string} options.config.REFRESH_ACCESS_TOKEN_ENDPOINT\n   * @param {string} options.config.ACCESS_TOKEN_COOKIE_NAME\n   * @param {string} options.config.CSRF_TOKEN_API_PATH\n   * @param {Object} options.config.hydratedAuthenticatedUser\n   * @param {Object} options.config.authenticatedUser\n   * @param {Object} options.loggingService requires logError and logInfo methods\n   */\n  constructor(options) {\n    this.authenticatedHttpClient = null;\n    this.httpClient = null;\n\n    ensureDefinedConfig(options, 'AuthService');\n    PropTypes.checkPropTypes(optionsPropTypes, options, 'options', 'AuthService');\n\n    this.config = options.config;\n    this.loggingService = options.loggingService;\n\n    // Mock user\n    this.authenticatedUser = this.config.authenticatedUser ? this.config.authenticatedUser : null;\n    this.hydratedAuthenticatedUser = this.config.hydratedAuthenticatedUser\n      ? this.config.hydratedAuthenticatedUser\n      : {};\n\n    this.authenticatedHttpClient = axios.create();\n    this.httpClient = axios.create();\n  }\n\n  /**\n   * A Jest mock function (jest.fn())\n   *\n   * Gets the authenticated HTTP client instance, which is an axios client wrapped in\n   * MockAdapter from axios-mock-adapter.\n   *\n   * @returns {HttpClient} An HttpClient wrapped in MockAdapter.\n   */\n  getAuthenticatedHttpClient = jest.fn(() => this.authenticatedHttpClient);\n\n  /**\n   * A Jest mock function (jest.fn())\n   *\n   * Gets the unauthenticated HTTP client instance, which is an axios client wrapped in\n   * MockAdapter from axios-mock-adapter.\n   *\n   * @returns {HttpClient} An HttpClient wrapped in MockAdapter.\n   */\n  getHttpClient = jest.fn(() => this.httpClient);\n\n  /**\n   * A Jest mock function (jest.fn())\n   *\n   * Builds a URL to the login page with a post-login redirect URL attached as a query parameter.\n   *\n   * ```\n   * const url = getLoginRedirectUrl('http://localhost/mypage');\n   * console.log(url); // http://localhost/login?next=http%3A%2F%2Flocalhost%2Fmypage\n   * ```\n   *\n   * @param {string} redirectUrl The URL the user should be redirected to after logging in.\n   */\n  getLoginRedirectUrl = jest.fn(\n    (redirectUrl = this.config.BASE_URL) => `${this.config.LOGIN_URL}?next=${encodeURIComponent(redirectUrl)}`,\n  );\n\n  /**\n   * A Jest mock function (jest.fn())\n   *\n   * Redirects the user to the logout page in the real implementation.  Is a no-op here.\n   *\n   * @param {string} redirectUrl The URL the user should be redirected to after logging in.\n   */\n  redirectToLogin = jest.fn((redirectUrl = this.config.BASE_URL) => {\n    // Do nothing after getting the URL - this preserves the calls properly, but doesn't redirect.\n    this.getLoginRedirectUrl(redirectUrl);\n  });\n\n  /**\n   * A Jest mock function (jest.fn())\n   *\n   * Builds a URL to the logout page with a post-logout redirect URL attached as a query parameter.\n   *\n   * ```\n   * const url = getLogoutRedirectUrl('http://localhost/mypage');\n   * console.log(url); // http://localhost/logout?next=http%3A%2F%2Flocalhost%2Fmypage\n   * ```\n   *\n   * @param {string} redirectUrl The URL the user should be redirected to after logging out.\n   */\n  getLogoutRedirectUrl = jest.fn((redirectUrl = this.config.BASE_URL) => `${this.config.LOGOUT_URL}?redirect_url=${encodeURIComponent(redirectUrl)}`);\n\n  /**\n   * A Jest mock function (jest.fn())\n   *\n   * Redirects the user to the logout page in the real implementation.  Is a no-op here.\n   *\n   * @param {string} redirectUrl The URL the user should be redirected to after logging out.\n   */\n  redirectToLogout = jest.fn((redirectUrl = this.config.BASE_URL) => {\n    // Do nothing after getting the URL - this preserves the calls properly, but doesn't redirect.\n    this.getLogoutRedirectUrl(redirectUrl);\n  });\n\n  /**\n   * A Jest mock function (jest.fn())\n   *\n   * If it exists, returns the user data representing the currently authenticated user. If the\n   * user is anonymous, returns null.\n   *\n   * @returns {UserData|null}\n   */\n  getAuthenticatedUser = jest.fn(() => this.authenticatedUser);\n\n  /**\n   * A Jest mock function (jest.fn())\n   *\n   * Sets the authenticated user to the provided value.\n   *\n   * @param {UserData} authUser\n   */\n  setAuthenticatedUser = jest.fn((authUser) => {\n    this.authenticatedUser = authUser;\n  });\n\n  /**\n   * A Jest mock function (jest.fn())\n   *\n   * Returns the current authenticated user details, as supplied in the `authenticatedUser` field\n   * of the config options.  Resolves to null if the user is unauthenticated / the config option\n   * has not been set.\n   *\n   * @returns {UserData|null} Resolves to the user's access token if they are\n   * logged in.\n   */\n  fetchAuthenticatedUser = jest.fn(() => this.getAuthenticatedUser());\n\n  /**\n   * A Jest mock function (jest.fn())\n   *\n   * Ensures a user is authenticated. It will redirect to login when not authenticated.\n   *\n   * @param {string} [redirectUrl=config.BASE_URL] to return user after login when not\n   * authenticated.\n   * @returns {UserData|null} Resolves to the user's access token if they are\n   * logged in.\n   */\n  ensureAuthenticatedUser = jest.fn((redirectUrl = this.config.BASE_URL) => {\n    this.fetchAuthenticatedUser();\n\n    if (this.getAuthenticatedUser() === null) {\n      // The user is not authenticated, send them to the login page.\n      this.redirectToLogin(redirectUrl);\n    }\n\n    return this.getAuthenticatedUser();\n  })\n\n  /**\n   * A Jest mock function (jest.fn())\n   *\n   * Adds the user data supplied in the `hydratedAuthenticatedUser` config option into the object\n   * returned by `getAuthenticatedUser`.  This emulates the behavior of a real auth service which\n   * would make a request to fetch this data prior to merging it in.\n   *\n   * ```\n   * console.log(authenticatedUser); // Will be sparse and only contain basic information.\n   * await hydrateAuthenticatedUser()\n   * const authenticatedUser = getAuthenticatedUser();\n   * console.log(authenticatedUser); // Will contain additional user information\n   * ```\n   *\n   * @returns {Promise<null>}\n   */\n  hydrateAuthenticatedUser = jest.fn(() => {\n    const user = this.getAuthenticatedUser();\n    if (user !== null) {\n      this.setAuthenticatedUser({ ...user, ...this.hydratedAuthenticatedUser });\n    }\n  });\n}\n\nexport default MockAuthService;\n"],"file":"MockAuthService.js"}