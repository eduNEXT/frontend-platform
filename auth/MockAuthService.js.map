{"version":3,"file":"MockAuthService.js","names":["axios","PropTypes","ensureDefinedConfig","userPropTypes","shape","userId","string","isRequired","username","roles","arrayOf","administrator","boolean","optionsPropTypes","config","BASE_URL","LMS_BASE_URL","LOGIN_URL","LOGOUT_URL","REFRESH_ACCESS_TOKEN_ENDPOINT","ACCESS_TOKEN_COOKIE_NAME","CSRF_TOKEN_API_PATH","loggingService","logError","func","logInfo","authenticatedUser","hydratedAuthenticatedUser","MockAuthService","constructor","options","_this","_defineProperty","jest","fn","authenticatedHttpClient","httpClient","redirectUrl","arguments","length","undefined","encodeURIComponent","getLoginRedirectUrl","getLogoutRedirectUrl","authUser","getAuthenticatedUser","fetchAuthenticatedUser","redirectToLogin","user","setAuthenticatedUser","_objectSpread","checkPropTypes","create","applyMiddleware","middleware","clients","cachedAuthenticatedHttpClient","cachedHttpClient","forEach","middlewareFn","client","error","Error","message"],"sources":["../../src/auth/MockAuthService.js"],"sourcesContent":["import axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { ensureDefinedConfig } from '../utils';\n\nconst userPropTypes = PropTypes.shape({\n  userId: PropTypes.string.isRequired,\n  username: PropTypes.string.isRequired,\n  roles: PropTypes.arrayOf(PropTypes.string),\n  administrator: PropTypes.boolean,\n});\n\nconst optionsPropTypes = {\n  config: PropTypes.shape({\n    BASE_URL: PropTypes.string.isRequired,\n    LMS_BASE_URL: PropTypes.string.isRequired,\n    LOGIN_URL: PropTypes.string.isRequired,\n    LOGOUT_URL: PropTypes.string.isRequired,\n    REFRESH_ACCESS_TOKEN_ENDPOINT: PropTypes.string.isRequired,\n    ACCESS_TOKEN_COOKIE_NAME: PropTypes.string.isRequired,\n    CSRF_TOKEN_API_PATH: PropTypes.string.isRequired,\n  }).isRequired,\n  loggingService: PropTypes.shape({\n    logError: PropTypes.func.isRequired,\n    logInfo: PropTypes.func.isRequired,\n  }).isRequired,\n  // The absence of authenticatedUser means the user is anonymous.\n  authenticatedUser: userPropTypes,\n  // Must be at least a valid user, but may have other fields.\n  hydratedAuthenticatedUser: userPropTypes,\n};\n\n/**\n * The MockAuthService class mocks authenticated user-fetching logic and allows for manually\n * setting user data.  It is compatible with axios-mock-adapter to wrap its HttpClients so that\n * they can be mocked for testing.\n *\n * It wraps all methods of the service with Jest mock functions (jest.fn()).  This allows test code\n * to assert expectations on all functions of the service while preserving sensible behaviors.  For\n * instance, the login/logout methods related to redirecting maintain their real behavior.\n *\n * This service is NOT suitable for use in an application itself - only tests.  It depends on Jest,\n * which should only be a dev dependency of your project.  You don't want to pull the entire suite\n * of test dependencies into your application at runtime, probably even in your dev server.\n *\n * In a test where you would like to mock out API requests - perhaps from a redux-thunk function -\n * you could do the following to set up a MockAuthService for your test:\n *\n * ```\n * import { getConfig, mergeConfig } from '@edx/frontend-platform';\n * import { configure, MockAuthService } from '@edx/frontend-platform/auth';\n * import MockAdapter from 'axios-mock-adapter';\n *\n * const mockLoggingService = {\n *   logInfo: jest.fn(),\n *   logError: jest.fn(),\n * };\n * mergeConfig({\n *   authenticatedUser: {\n *     userId: 'abc123',\n *     username: 'Mock User',\n *     roles: [],\n *     administrator: false,\n *   },\n * });\n * configure(MockAuthService, { config: getConfig(), loggingService: mockLoggingService });\n * const mockAdapter = new MockAdapter(getAuthenticatedHttpClient());\n * // Mock calls for your tests.  This configuration can be done in any sort of test setup.\n * mockAdapter.onGet(...);\n * ```\n *\n * Also see the `initializeMockApp` function which also automatically uses mock services for\n * Logging and Analytics.\n *\n * @implements {AuthService}\n * @memberof module:Auth\n */\nclass MockAuthService {\n  /**\n   * @param {Object} options\n   * @param {Object} options.config\n   * @param {string} options.config.BASE_URL\n   * @param {string} options.config.LMS_BASE_URL\n   * @param {string} options.config.LOGIN_URL\n   * @param {string} options.config.LOGOUT_URL\n   * @param {string} options.config.REFRESH_ACCESS_TOKEN_ENDPOINT\n   * @param {string} options.config.ACCESS_TOKEN_COOKIE_NAME\n   * @param {string} options.config.CSRF_TOKEN_API_PATH\n   * @param {Object} options.config.hydratedAuthenticatedUser\n   * @param {Object} options.config.authenticatedUser\n   * @param {Object} options.loggingService requires logError and logInfo methods\n   */\n  constructor(options) {\n    this.authenticatedHttpClient = null;\n    this.httpClient = null;\n\n    ensureDefinedConfig(options, 'AuthService');\n    PropTypes.checkPropTypes(optionsPropTypes, options, 'options', 'AuthService');\n\n    this.config = options.config;\n    this.loggingService = options.loggingService;\n\n    // Mock user\n    this.authenticatedUser = this.config.authenticatedUser ? this.config.authenticatedUser : null;\n    this.hydratedAuthenticatedUser = this.config.hydratedAuthenticatedUser\n      ? this.config.hydratedAuthenticatedUser\n      : {};\n\n    this.authenticatedHttpClient = axios.create();\n    this.httpClient = axios.create();\n  }\n\n  /**\n   * A Jest mock function (jest.fn())\n   *\n   * Applies middleware to the axios instances in this service.\n   *\n   * @param {Array} middleware Middleware to apply.\n   */\n  applyMiddleware(middleware = []) {\n    const clients = [\n      this.authenticatedHttpClient, this.httpClient,\n      this.cachedAuthenticatedHttpClient, this.cachedHttpClient,\n    ];\n    try {\n      (middleware).forEach((middlewareFn) => {\n        clients.forEach((client) => client && middlewareFn(client));\n      });\n    } catch (error) {\n      throw new Error(`Failed to apply middleware: ${error.message}.`);\n    }\n  }\n\n  /**\n   * A Jest mock function (jest.fn())\n   *\n   * Gets the authenticated HTTP client instance, which is an axios client wrapped in\n   * MockAdapter from axios-mock-adapter.\n   *\n   * @returns {HttpClient} An HttpClient wrapped in MockAdapter.\n   */\n  getAuthenticatedHttpClient = jest.fn(() => this.authenticatedHttpClient);\n\n  /**\n   * A Jest mock function (jest.fn())\n   *\n   * Gets the unauthenticated HTTP client instance, which is an axios client wrapped in\n   * MockAdapter from axios-mock-adapter.\n   *\n   * @returns {HttpClient} An HttpClient wrapped in MockAdapter.\n   */\n  getHttpClient = jest.fn(() => this.httpClient);\n\n  /**\n   * A Jest mock function (jest.fn())\n   *\n   * Builds a URL to the login page with a post-login redirect URL attached as a query parameter.\n   *\n   * ```\n   * const url = getLoginRedirectUrl('http://localhost/mypage');\n   * console.log(url); // http://localhost/login?next=http%3A%2F%2Flocalhost%2Fmypage\n   * ```\n   *\n   * @param {string} redirectUrl The URL the user should be redirected to after logging in.\n   */\n  getLoginRedirectUrl = jest.fn(\n    (redirectUrl = this.config.BASE_URL) => `${this.config.LOGIN_URL}?next=${encodeURIComponent(redirectUrl)}`,\n  );\n\n  /**\n   * A Jest mock function (jest.fn())\n   *\n   * Redirects the user to the logout page in the real implementation.  Is a no-op here.\n   *\n   * @param {string} redirectUrl The URL the user should be redirected to after logging in.\n   */\n  redirectToLogin = jest.fn((redirectUrl = this.config.BASE_URL) => {\n    // Do nothing after getting the URL - this preserves the calls properly, but doesn't redirect.\n    this.getLoginRedirectUrl(redirectUrl);\n  });\n\n  /**\n   * A Jest mock function (jest.fn())\n   *\n   * Builds a URL to the logout page with a post-logout redirect URL attached as a query parameter.\n   *\n   * ```\n   * const url = getLogoutRedirectUrl('http://localhost/mypage');\n   * console.log(url); // http://localhost/logout?next=http%3A%2F%2Flocalhost%2Fmypage\n   * ```\n   *\n   * @param {string} redirectUrl The URL the user should be redirected to after logging out.\n   */\n  getLogoutRedirectUrl = jest.fn((redirectUrl = this.config.BASE_URL) => `${this.config.LOGOUT_URL}?redirect_url=${encodeURIComponent(redirectUrl)}`);\n\n  /**\n   * A Jest mock function (jest.fn())\n   *\n   * Redirects the user to the logout page in the real implementation.  Is a no-op here.\n   *\n   * @param {string} redirectUrl The URL the user should be redirected to after logging out.\n   */\n  redirectToLogout = jest.fn((redirectUrl = this.config.BASE_URL) => {\n    // Do nothing after getting the URL - this preserves the calls properly, but doesn't redirect.\n    this.getLogoutRedirectUrl(redirectUrl);\n  });\n\n  /**\n   * A Jest mock function (jest.fn())\n   *\n   * If it exists, returns the user data representing the currently authenticated user. If the\n   * user is anonymous, returns null.\n   *\n   * @returns {UserData|null}\n   */\n  getAuthenticatedUser = jest.fn(() => this.authenticatedUser);\n\n  /**\n   * A Jest mock function (jest.fn())\n   *\n   * Sets the authenticated user to the provided value.\n   *\n   * @param {UserData} authUser\n   */\n  setAuthenticatedUser = jest.fn((authUser) => {\n    this.authenticatedUser = authUser;\n  });\n\n  /**\n   * A Jest mock function (jest.fn())\n   *\n   * Returns the current authenticated user details, as supplied in the `authenticatedUser` field\n   * of the config options.  Resolves to null if the user is unauthenticated / the config option\n   * has not been set.\n   *\n   * @returns {UserData|null} Resolves to the user's access token if they are\n   * logged in.\n   */\n  fetchAuthenticatedUser = jest.fn(() => this.getAuthenticatedUser());\n\n  /**\n   * A Jest mock function (jest.fn())\n   *\n   * Ensures a user is authenticated. It will redirect to login when not authenticated.\n   *\n   * @param {string} [redirectUrl=config.BASE_URL] to return user after login when not\n   * authenticated.\n   * @returns {UserData|null} Resolves to the user's access token if they are\n   * logged in.\n   */\n  ensureAuthenticatedUser = jest.fn((redirectUrl = this.config.BASE_URL) => {\n    this.fetchAuthenticatedUser();\n\n    if (this.getAuthenticatedUser() === null) {\n      // The user is not authenticated, send them to the login page.\n      this.redirectToLogin(redirectUrl);\n    }\n\n    return this.getAuthenticatedUser();\n  });\n\n  /**\n   * A Jest mock function (jest.fn())\n   *\n   * Adds the user data supplied in the `hydratedAuthenticatedUser` config option into the object\n   * returned by `getAuthenticatedUser`.  This emulates the behavior of a real auth service which\n   * would make a request to fetch this data prior to merging it in.\n   *\n   * ```\n   * console.log(authenticatedUser); // Will be sparse and only contain basic information.\n   * await hydrateAuthenticatedUser()\n   * const authenticatedUser = getAuthenticatedUser();\n   * console.log(authenticatedUser); // Will contain additional user information\n   * ```\n   *\n   * @returns {Promise<null>}\n   */\n  hydrateAuthenticatedUser = jest.fn(() => {\n    const user = this.getAuthenticatedUser();\n    if (user !== null) {\n      this.setAuthenticatedUser({ ...user, ...this.hydratedAuthenticatedUser });\n    }\n  });\n}\n\nexport default MockAuthService;\n"],"mappings":"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","ignoreList":[]}