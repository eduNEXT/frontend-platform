{"version":3,"file":"createRetryInterceptor.js","names":["axios","defaultGetBackoffMilliseconds","nthRetry","maximumBackoffMilliseconds","exponentialBackoffSeconds","randomFractionOfASecond","Math","random","backoffSeconds","backoffMilliseconds","round","min","createRetryInterceptor","options","httpClient","create","getBackoffMilliseconds","shouldRetry","error","isRequestError","response","config","defaultMaxRetries","interceptor","Promise","reject","maxRetries","retryRequest","backoffDelay","resolve","setTimeout","request","retryResponse"],"sources":["../../../src/auth/interceptors/createRetryInterceptor.js"],"sourcesContent":["import axios from 'axios';\n\n// This default algorithm is a recreation of what is documented here\n// https://cloud.google.com/storage/docs/exponential-backoff\nconst defaultGetBackoffMilliseconds = (nthRetry, maximumBackoffMilliseconds = 16000) => {\n  // Retry at exponential intervals (2, 4, 8, 16...)\n  const exponentialBackoffSeconds = 2 ** nthRetry;\n  // Add some randomness to avoid sending retries from separate requests all at once\n  const randomFractionOfASecond = Math.random();\n  const backoffSeconds = exponentialBackoffSeconds + randomFractionOfASecond;\n  const backoffMilliseconds = Math.round(backoffSeconds * 1000);\n  return Math.min(backoffMilliseconds, maximumBackoffMilliseconds);\n};\n\nconst createRetryInterceptor = (options = {}) => {\n  const {\n    httpClient = axios.create(),\n    getBackoffMilliseconds = defaultGetBackoffMilliseconds,\n    // By default only retry outbound request failures (not responses)\n    shouldRetry = (error) => {\n      const isRequestError = !error.response && error.config;\n      return isRequestError;\n    },\n    // A per-request maxRetries can be specified in request config.\n    defaultMaxRetries = 2,\n  } = options;\n\n  const interceptor = async (error) => {\n    const { config } = error;\n\n    // If no config exists there was some other error setting up the request\n    if (!config) {\n      return Promise.reject(error);\n    }\n\n    if (!shouldRetry(error)) {\n      return Promise.reject(error);\n    }\n\n    const {\n      maxRetries = defaultMaxRetries,\n    } = config;\n\n    const retryRequest = async (nthRetry) => {\n      if (nthRetry > maxRetries) {\n        // Reject with the original error\n        return Promise.reject(error);\n      }\n\n      let retryResponse;\n\n      try {\n        const backoffDelay = getBackoffMilliseconds(nthRetry);\n        // Delay (wrapped in a promise so we can await the setTimeout)\n        await new Promise(resolve => { setTimeout(resolve, backoffDelay); });\n        // Make retry request\n        retryResponse = await httpClient.request(config);\n      } catch (e) {\n        return retryRequest(nthRetry + 1);\n      }\n\n      return retryResponse;\n    };\n\n    return retryRequest(1);\n  };\n\n  return interceptor;\n};\n\nexport default createRetryInterceptor;\nexport { defaultGetBackoffMilliseconds };\n"],"mappings":";+CACA;AAAA;AAAA;AADA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA,IAAMC,6BAA6B,GAAG,SAAhCA,6BAA6B,CAAIC,QAAQ,EAAyC;EAAA,IAAvCC,0BAA0B,uEAAG,KAAK;EACjF;EACA,IAAMC,yBAAyB,YAAG,CAAC,EAAIF,QAAQ;EAC/C;EACA,IAAMG,uBAAuB,GAAGC,IAAI,CAACC,MAAM,EAAE;EAC7C,IAAMC,cAAc,GAAGJ,yBAAyB,GAAGC,uBAAuB;EAC1E,IAAMI,mBAAmB,GAAGH,IAAI,CAACI,KAAK,CAACF,cAAc,GAAG,IAAI,CAAC;EAC7D,OAAOF,IAAI,CAACK,GAAG,CAACF,mBAAmB,EAAEN,0BAA0B,CAAC;AAClE,CAAC;AAED,IAAMS,sBAAsB,GAAG,SAAzBA,sBAAsB,GAAqB;EAAA,IAAjBC,OAAO,uEAAG,CAAC,CAAC;EAC1C,0BAUIA,OAAO,CATTC,UAAU;IAAVA,UAAU,oCAAGd,KAAK,CAACe,MAAM,EAAE;IAAA,wBASzBF,OAAO,CARTG,sBAAsB;IAAtBA,sBAAsB,sCAAGf,6BAA6B;IAAA,uBAQpDY,OAAO,CANTI,WAAW;IAAXA,WAAW,qCAAG,UAACC,KAAK,EAAK;MACvB,IAAMC,cAAc,GAAG,CAACD,KAAK,CAACE,QAAQ,IAAIF,KAAK,CAACG,MAAM;MACtD,OAAOF,cAAc;IACvB,CAAC;IAAA,wBAGCN,OAAO,CADTS,iBAAiB;IAAjBA,iBAAiB,sCAAG,CAAC;EAGvB,IAAMC,WAAW;IAAA,sEAAG,kBAAOL,KAAK;MAAA;MAAA;QAAA;UAAA;YACtBG,MAAM,GAAKH,KAAK,CAAhBG,MAAM,EAEd;YAAA,IACKA,MAAM;cAAA;cAAA;YAAA;YAAA,kCACFG,OAAO,CAACC,MAAM,CAACP,KAAK,CAAC;UAAA;YAAA,IAGzBD,WAAW,CAACC,KAAK,CAAC;cAAA;cAAA;YAAA;YAAA,kCACdM,OAAO,CAACC,MAAM,CAACP,KAAK,CAAC;UAAA;YAAA,qBAK1BG,MAAM,CADRK,UAAU,EAAVA,UAAU,mCAAGJ,iBAAiB;YAG1BK,YAAY;cAAA,uEAAG,iBAAOzB,QAAQ;gBAAA;gBAAA;kBAAA;oBAAA;sBAAA,MAC9BA,QAAQ,GAAGwB,UAAU;wBAAA;wBAAA;sBAAA;sBAAA,iCAEhBF,OAAO,CAACC,MAAM,CAACP,KAAK,CAAC;oBAAA;sBAAA;sBAMtBU,YAAY,GAAGZ,sBAAsB,CAACd,QAAQ,CAAC,EACrD;sBAAA;sBAAA,OACM,IAAIsB,OAAO,CAAC,UAAAK,OAAO,EAAI;wBAAEC,UAAU,CAACD,OAAO,EAAED,YAAY,CAAC;sBAAE,CAAC,CAAC;oBAAA;sBAAA;sBAAA,OAE9Cd,UAAU,CAACiB,OAAO,CAACV,MAAM,CAAC;oBAAA;sBAAhDW,aAAa;sBAAA;sBAAA;oBAAA;sBAAA;sBAAA;sBAAA,iCAENL,YAAY,CAACzB,QAAQ,GAAG,CAAC,CAAC;oBAAA;sBAAA,iCAG5B8B,aAAa;oBAAA;oBAAA;sBAAA;kBAAA;gBAAA;cAAA,CACrB;cAAA,gBAnBKL,YAAY;gBAAA;cAAA;YAAA;YAAA,kCAqBXA,YAAY,CAAC,CAAC,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACvB;IAAA,gBAtCKJ,WAAW;MAAA;IAAA;EAAA,GAsChB;EAED,OAAOA,WAAW;AACpB,CAAC;AAED,eAAeX,sBAAsB;AACrC,SAASX,6BAA6B"}