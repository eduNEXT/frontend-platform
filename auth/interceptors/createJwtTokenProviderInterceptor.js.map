{"version":3,"sources":["../../../src/auth/interceptors/createJwtTokenProviderInterceptor.js"],"names":["createJwtTokenProviderInterceptor","options","jwtTokenService","shouldSkip","interceptor","axiosRequestConfig","getJwtToken","requestError","Object","create","message","config","Promise","reject","headers","common"],"mappings":";;;;AAAA,IAAMA,iCAAiC,GAAG,SAApCA,iCAAoC,CAACC,OAAD,EAAa;AACrD,MACEC,eADF,GAGID,OAHJ,CACEC,eADF;AAAA,MAEEC,UAFF,GAGIF,OAHJ,CAEEE,UAFF,CADqD,CAMrD;AACA;;AACA,MAAMC,WAAW;AAAA,uEAAG,iBAAOC,kBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACdF,UAAU,CAACE,kBAAD,CADI;AAAA;AAAA;AAAA;;AAAA,+CAETA,kBAFS;;AAAA;AAAA;AAAA;AAAA,qBAWVH,eAAe,CAACI,WAAhB,EAXU;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaVC,cAAAA,YAbU,GAaKC,MAAM,CAACC,MAAP,aAbL;AAchBF,cAAAA,YAAY,CAACG,OAAb,2BAAwCH,YAAY,CAACG,OAArD,EAdgB,CAehB;;AACAH,cAAAA,YAAY,CAACI,MAAb,GAAsBN,kBAAtB;AAhBgB,+CAiBTO,OAAO,CAACC,MAAR,CAAeN,YAAf,CAjBS;;AAAA;AAoBlB;AACA;AACAF,cAAAA,kBAAkB,CAACS,OAAnB,CAA2BC,MAA3B,CAAkC,gBAAlC,IAAsD,IAAtD;AAtBkB,+CAuBXV,kBAvBW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAXD,WAAW;AAAA;AAAA;AAAA,KAAjB;;AA0BA,SAAOA,WAAP;AACD,CAnCD;;AAqCA,eAAeJ,iCAAf","sourcesContent":["const createJwtTokenProviderInterceptor = (options) => {\n  const {\n    jwtTokenService,\n    shouldSkip,\n  } = options;\n\n  // Creating the interceptor inside this closure to\n  // maintain reference to the options supplied.\n  const interceptor = async (axiosRequestConfig) => {\n    if (shouldSkip(axiosRequestConfig)) {\n      return axiosRequestConfig;\n    }\n\n    // Important: the job of this interceptor is to refresh a jwt token and update\n    // the original request configuration. Errors thrown from fetching the jwt\n    // should contain the original request config. This allows other interceptors\n    // (namely our retry request interceptor below) to access the original request\n    // and handle it appropriately\n    try {\n      await jwtTokenService.getJwtToken();\n    } catch (error) {\n      const requestError = Object.create(error);\n      requestError.message = `[getJwtToken] ${requestError.message}`;\n      // Important: return the original axios request config\n      requestError.config = axiosRequestConfig;\n      return Promise.reject(requestError);\n    }\n\n    // Add the proper headers to tell the server to look for the jwt cookie\n    // eslint-disable-next-line no-param-reassign\n    axiosRequestConfig.headers.common['USE-JWT-COOKIE'] = true;\n    return axiosRequestConfig;\n  };\n\n  return interceptor;\n};\n\nexport default createJwtTokenProviderInterceptor;\n"],"file":"createJwtTokenProviderInterceptor.js"}