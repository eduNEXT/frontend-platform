{"version":3,"file":"createProcessAxiosRequestErrorInterceptor.js","names":["processAxiosError","createProcessAxiosRequestErrorInterceptor","options","loggingService","interceptor","error","processedError","httpErrorStatus","customAttributes","logInfo","message","Promise","reject"],"sources":["../../../src/auth/interceptors/createProcessAxiosRequestErrorInterceptor.js"],"sourcesContent":["import { processAxiosError } from '../utils';\n\nconst createProcessAxiosRequestErrorInterceptor = (options) => {\n  const { loggingService } = options;\n\n  // Creating the interceptor inside this closure to\n  // maintain reference to the options supplied.\n  const interceptor = async (error) => {\n    const processedError = processAxiosError(error);\n    const { httpErrorStatus } = processedError.customAttributes;\n    if (httpErrorStatus === 401 || httpErrorStatus === 403) {\n      loggingService.logInfo(processedError.message, processedError.customAttributes);\n    }\n    return Promise.reject(processedError);\n  };\n\n  return interceptor;\n};\n\nexport default createProcessAxiosRequestErrorInterceptor;\n"],"mappings":";+CACA;AAAA;AAAA;AADA,SAASA,iBAAiB,QAAQ,UAAU;AAE5C,IAAMC,yCAAyC,GAAG,SAA5CA,yCAAyC,CAAIC,OAAO,EAAK;EAC7D,IAAQC,cAAc,GAAKD,OAAO,CAA1BC,cAAc;;EAEtB;EACA;EACA,IAAMC,WAAW;IAAA,sEAAG,iBAAOC,KAAK;MAAA;MAAA;QAAA;UAAA;YACxBC,cAAc,GAAGN,iBAAiB,CAACK,KAAK,CAAC;YACvCE,eAAe,GAAKD,cAAc,CAACE,gBAAgB,CAAnDD,eAAe;YACvB,IAAIA,eAAe,KAAK,GAAG,IAAIA,eAAe,KAAK,GAAG,EAAE;cACtDJ,cAAc,CAACM,OAAO,CAACH,cAAc,CAACI,OAAO,EAAEJ,cAAc,CAACE,gBAAgB,CAAC;YACjF;YAAC,iCACMG,OAAO,CAACC,MAAM,CAACN,cAAc,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACtC;IAAA,gBAPKF,WAAW;MAAA;IAAA;EAAA,GAOhB;EAED,OAAOA,WAAW;AACpB,CAAC;AAED,eAAeH,yCAAyC"}