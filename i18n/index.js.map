{"version":3,"sources":["../../src/i18n/index.js"],"names":["intlShape","FormattedDate","FormattedTime","FormattedRelative","FormattedNumber","FormattedPlural","FormattedMessage","defineMessages","IntlProvider","configure","getPrimaryLanguageSubtag","getLocale","getMessages","isRtl","handleRtl","LOCALE_CHANGED","LOCALE_TOPIC","default","injectIntl","getCountryList","getCountryMessages","getLanguageList","getLanguageMessages"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA,SACEA,SADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,iBAJF,EAKEC,eALF,EAMEC,eANF,EAOEC,gBAPF,EAQEC,cARF,EASEC,YATF,QAUO,YAVP;AAYA,SACEC,SADF,EAEEC,wBAFF,EAGEC,SAHF,EAIEC,WAJF,EAKEC,KALF,EAMEC,SANF,EAOEC,cAPF,EAQEC,YARF,QASO,OATP;AAWA,SACEC,OAAO,IAAIC,UADb,QAEO,sBAFP;AAIA,SACEC,cADF,EAEEC,kBAFF,QAGO,aAHP;AAKA,SACEC,eADF,EAEEC,mBAFF,QAGO,aAHP","sourcesContent":["/**\n * #### Import members from **@edx/frontend-platform/i18n**\n * The i18n module relies on react-intl and re-exports all of that package's exports.\n *\n * For each locale we want to support, react-intl needs 1) the locale-data, which includes\n * information about how to format numbers, handle plurals, etc., and 2) the translations, as an\n * object holding message id / translated string pairs.  A locale string and the messages object are\n * passed into the IntlProvider element that wraps your element hierarchy.\n *\n * Note that react-intl has no way of checking if the translations you give it actually have\n * anything to do with the locale you pass it; it will happily use whatever messages object you pass\n * in.  However, if the locale data for the locale you passed into the IntlProvider was not\n * correctly installed with addLocaleData, all of your translations will fall back to the default\n * (in our case English), *even if you gave IntlProvider the correct messages object for that\n * locale*.\n *\n * Messages are provided to this module via the configure() function below.\n *\n *\n * @module Internationalization\n * @see {@link https://github.com/edx/frontend-platform/blob/master/docs/how_tos/i18n.rst}\n * @see {@link https://github.com/formatjs/react-intl/blob/master/docs/Components.md|React Intl} for components exported from this module.\n *\n */\n\n/**\n * @name FormattedDate\n * @kind class\n * @see {@link https://github.com/formatjs/react-intl/blob/master/docs/Components.md#formatteddate|React Intl}\n */\n\n/**\n * @name FormattedTime\n * @kind class\n * @see {@link https://github.com/formatjs/react-intl/blob/master/docs/Components.md#formatteddate|React Intl}\n */\n\n/**\n * @name FormattedRelative\n * @kind class\n * @see {@link https://github.com/formatjs/react-intl/blob/master/docs/Components.md#formattedrelative|React Intl}\n */\n\n/**\n * @name FormattedNumber\n * @kind class\n * @see {@link https://github.com/formatjs/react-intl/blob/master/docs/Components.md#formattednumber|React Intl}\n */\n\n/**\n * @name FormattedPlural\n * @kind class\n * @see {@link https://github.com/formatjs/react-intl/blob/master/docs/Components.md#formattedplural|React Intl}\n */\n\n/**\n * @name FormattedMessage\n * @kind class\n * @see {@link https://github.com/formatjs/react-intl/blob/master/docs/Components.md#formattedmessage|React Intl}\n */\n\n/**\n * @name IntlProvider\n * @kind class\n * @see {@link https://github.com/formatjs/react-intl/blob/master/docs/Components.md#intlprovider|React Intl}\n */\n\n/**\n * @name intlShape\n * @kind constant\n * @see {@link https://github.com/formatjs/react-intl/blob/master/docs/API.md#intlshape|React Intl}\n */\n\n/**\n * @name defineMessages\n * @kind function\n * @see {@link https://github.com/formatjs/react-intl/blob/master/docs/API.md#definemessages|React Intl}\n */\n\nexport {\n  intlShape,\n  FormattedDate,\n  FormattedTime,\n  FormattedRelative,\n  FormattedNumber,\n  FormattedPlural,\n  FormattedMessage,\n  defineMessages,\n  IntlProvider,\n} from 'react-intl';\n\nexport {\n  configure,\n  getPrimaryLanguageSubtag,\n  getLocale,\n  getMessages,\n  isRtl,\n  handleRtl,\n  LOCALE_CHANGED,\n  LOCALE_TOPIC,\n} from './lib';\n\nexport {\n  default as injectIntl,\n} from './injectIntlWithShim';\n\nexport {\n  getCountryList,\n  getCountryMessages,\n} from './countries';\n\nexport {\n  getLanguageList,\n  getLanguageMessages,\n} from './languages';\n"],"file":"index.js"}