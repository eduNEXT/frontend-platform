{"version":3,"sources":["../../src/react/AuthenticatedPageRoute.jsx"],"names":["React","useContext","PropTypes","useRouteMatch","AppContext","PageRoute","getLoginRedirectUrl","AuthenticatedPageRoute","redirectUrl","props","authenticatedUser","match","path","exact","strict","sensitive","destination","global","location","href","assign","propTypes","string","defaultProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,mBAAT,QAAoC,SAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,sBAAT,OAA2D;AAAA,MAAzBC,WAAyB,QAAzBA,WAAyB;AAAA,MAATC,KAAS;;AACxE,oBAA8BR,UAAU,CAACG,UAAD,CAAxC;AAAA,MAAQM,iBAAR,eAAQA,iBAAR;;AAEA,MAAMC,KAAK,GAAGR,aAAa,CAAC;AAC1B;AACAS,IAAAA,IAAI,EAAEH,KAAK,CAACG,IAFc;AAG1B;AACAC,IAAAA,KAAK,EAAEJ,KAAK,CAACI,KAJa;AAK1B;AACAC,IAAAA,MAAM,EAAEL,KAAK,CAACK,MANY;AAO1B;AACAC,IAAAA,SAAS,EAAEN,KAAK,CAACM;AARS,GAAD,CAA3B;;AAWA,MAAIL,iBAAiB,KAAK,IAA1B,EAAgC;AAC9B,QAAIC,KAAJ,EAAW;AACT,UAAMK,WAAW,GAAGR,WAAW,IAAIF,mBAAmB,CAACW,MAAM,CAACC,QAAP,CAAgBC,IAAjB,CAAtD;AACAF,MAAAA,MAAM,CAACC,QAAP,CAAgBE,MAAhB,CAAuBJ,WAAvB;AACD,KAJ6B,CAK9B;AACA;;;AACA,WAAO,IAAP;AACD;;AACD,sBACE,oBAAC,SAAD,EAAeP,KAAf,CADF;AAGD;AAEDF,sBAAsB,CAACc,SAAvB,GAAmC;AACjCb,EAAAA,WAAW,EAAEN,SAAS,CAACoB;AADU,CAAnC;AAIAf,sBAAsB,CAACgB,YAAvB,GAAsC;AACpCf,EAAAA,WAAW,EAAE;AADuB,CAAtC","sourcesContent":["import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useRouteMatch } from 'react-router-dom';\n\nimport AppContext from './AppContext';\nimport PageRoute from './PageRoute';\nimport { getLoginRedirectUrl } from '../auth';\n\n/**\n * A react-router route that redirects to the login page when the route becomes active and the user\n * is not authenticated.  If the application has been initialized with `requireAuthenticatedUser`\n * false, an authenticatedPageRoute can be used to protect a subset of the application's routes,\n * rather than the entire application.\n *\n * It can optionally accept an override URL to redirect to instead of the login page.\n *\n * Like a `PageRoute`, also calls `sendPageEvent` when the route becomes active.\n *\n * @see PageRoute\n * @see {@link module:frontend-platform/analytics~sendPageEvent}\n * @memberof module:React\n * @param {Object} props\n * @param {string} props.redirectUrl The URL anonymous users should be redirected to, rather than\n * viewing the route's contents.\n */\nexport default function AuthenticatedPageRoute({ redirectUrl, ...props }) {\n  const { authenticatedUser } = useContext(AppContext);\n\n  const match = useRouteMatch({\n    // eslint-disable-next-line react/prop-types\n    path: props.path,\n    // eslint-disable-next-line react/prop-types\n    exact: props.exact,\n    // eslint-disable-next-line react/prop-types\n    strict: props.strict,\n    // eslint-disable-next-line react/prop-types\n    sensitive: props.sensitive,\n  });\n\n  if (authenticatedUser === null) {\n    if (match) {\n      const destination = redirectUrl || getLoginRedirectUrl(global.location.href);\n      global.location.assign(destination);\n    }\n    // This emulates a Route's way of displaying nothing if the route's path doesn't match the\n    // current URL.\n    return null;\n  }\n  return (\n    <PageRoute {...props} />\n  );\n}\n\nAuthenticatedPageRoute.propTypes = {\n  redirectUrl: PropTypes.string,\n};\n\nAuthenticatedPageRoute.defaultProps = {\n  redirectUrl: null,\n};\n"],"file":"AuthenticatedPageRoute.js"}