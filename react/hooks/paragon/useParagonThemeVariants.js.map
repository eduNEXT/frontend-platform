{"version":3,"file":"useParagonThemeVariants.js","names":["useEffect","useState","logError","logInfo","removeExistingLinks","getConfig","useParagonThemeVariants","_ref","themeVariants","currentThemeVariant","onLoad","onDarkModeSystemPreferenceChange","isParagonThemeVariantLoaded","setIsParagonThemeVariantLoaded","isBrandThemeVariantLoaded","setIsBrandThemeVariantLoaded","someFn","colorSchemeQuery","matches","window","matchMedia","addEventListener","removeEventListener","htmlDataThemeVariantAttr","document","querySelector","setAttribute","removeAttribute","generateStylesheetRelAttr","themeVariant","Object","entries","forEach","_ref2","value","urls","getParagonThemeVariantLink","head","existingThemeVariantLink","default","existingThemeVariantBrandLink","brandOverride","getExistingThemeVariantLinks","isBrandOverride","themeVariantLinkSelector","querySelectorAll","createThemeVariantLink","url","isFallbackThemeUrl","arguments","length","undefined","themeVariantLink","createElement","href","rel","dataset","brandThemeVariant","paragonThemeVariant","onload","onerror","otherExistingLinks","paragonThemeAccessor","themeUrls","PARAGON_THEME","variants","themeVariantFallbackUrl","BASE_URL","fileName","foundParagonThemeVariantLink","insertAdjacentElement","paragonThemeVariantLink","brandThemeVariantLink","updatedStylesheetRel"],"sources":["../../../../src/react/hooks/paragon/useParagonThemeVariants.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { logError, logInfo } from '../../../logging';\nimport { removeExistingLinks } from './utils';\nimport { getConfig } from '../../../config';\n\n/**\n * Adds/updates a `<link>` element in the HTML document to load each theme variant's CSS, setting the\n * non-current theme variants as \"alternate\" stylesheets. That is, the browser will still download\n * the CSS for the non-current theme variants, but at a lower priority than the current theme\n * variant's CSS. This ensures that if the theme variant is changed at runtime, the CSS for the new\n * theme variant will already be loaded.\n *\n * @memberof module:React\n * @param {object} args\n * @param {object} [args.themeVariants] An object containing the URLs for each supported theme variant, e.g.: `{ light: { url: 'https://path/to/light.css' } }`.\n * @param {string} [args.currentThemeVariant] The currently applied theme variant, e.g.: `light`.\n * @param {string} args.onLoad A callback function called when the theme variant(s) CSS is loaded.\n */\nconst useParagonThemeVariants = ({\n  themeVariants,\n  currentThemeVariant,\n  onLoad,\n  onDarkModeSystemPreferenceChange,\n}) => {\n  const [isParagonThemeVariantLoaded, setIsParagonThemeVariantLoaded] = useState(false);\n  const [isBrandThemeVariantLoaded, setIsBrandThemeVariantLoaded] = useState(false);\n\n  useEffect(() => {\n    const someFn = (colorSchemeQuery) => {\n      onDarkModeSystemPreferenceChange(colorSchemeQuery.matches);\n    };\n    const colorSchemeQuery = window.matchMedia?.('(prefers-color-scheme: dark)');\n    if (colorSchemeQuery) {\n      colorSchemeQuery.addEventListener('change', someFn);\n    }\n    return () => {\n      if (colorSchemeQuery) {\n        colorSchemeQuery.removeEventListener('change', someFn);\n      }\n    };\n  }, [onDarkModeSystemPreferenceChange]);\n\n  useEffect(() => {\n    if (currentThemeVariant && themeVariants?.[currentThemeVariant]) {\n      const htmlDataThemeVariantAttr = 'data-paragon-theme-variant';\n      document.querySelector('html').setAttribute(htmlDataThemeVariantAttr, currentThemeVariant);\n      return () => {\n        document.querySelector('html').removeAttribute(htmlDataThemeVariantAttr);\n      };\n    }\n    return () => {}; // no-op\n  }, [themeVariants, currentThemeVariant]);\n\n  useEffect(() => {\n    // Call `onLoad` once both the paragon and brand theme variant are loaded.\n    if (isParagonThemeVariantLoaded && isBrandThemeVariantLoaded) {\n      onLoad();\n    }\n  }, [isParagonThemeVariantLoaded, isBrandThemeVariantLoaded, onLoad]);\n\n  useEffect(() => {\n    if (!themeVariants) {\n      return;\n    }\n\n    /**\n     * Determines the value for the `rel` attribute for a given theme variant based\n     * on if its the currently applied variant.\n     */\n    const generateStylesheetRelAttr = (themeVariant) => (currentThemeVariant === themeVariant ? 'stylesheet' : 'alternate stylesheet');\n\n    // Iterate over each theme variant URL and inject it into the HTML document, if it doesn't already exist.\n    Object.entries(themeVariants).forEach(([themeVariant, value]) => {\n      // If there is no config for the theme variant URL, set the theme variant to loaded and continue.\n      if (!value.urls) {\n        setIsParagonThemeVariantLoaded(true);\n        setIsBrandThemeVariantLoaded(true);\n        return;\n      }\n      const getParagonThemeVariantLink = () => document.head.querySelector(`link[data-paragon-theme-variant='${themeVariant}']`);\n      const existingThemeVariantLink = document.head.querySelector(`link[href='${value.urls.default}']`);\n      const existingThemeVariantBrandLink = document.head.querySelector(`link[href='${value.urls.brandOverride}']`);\n\n      const getExistingThemeVariantLinks = (isBrandOverride) => {\n        const themeVariantLinkSelector = `link[data-${isBrandOverride ? 'brand' : 'paragon'}-theme-variant='${themeVariant}']`;\n        return document.head.querySelectorAll(themeVariantLinkSelector);\n      };\n\n      const createThemeVariantLink = (\n        url,\n        {\n          isFallbackThemeUrl = false,\n          isBrandOverride = false,\n        } = {},\n      ) => {\n        let themeVariantLink = document.createElement('link');\n        themeVariantLink.href = url;\n        themeVariantLink.rel = generateStylesheetRelAttr(themeVariant);\n        if (isBrandOverride) {\n          themeVariantLink.dataset.brandThemeVariant = themeVariant;\n        } else {\n          themeVariantLink.dataset.paragonThemeVariant = themeVariant;\n        }\n\n        themeVariantLink.onload = () => {\n          if (themeVariant === currentThemeVariant) {\n            if (isBrandOverride) {\n              setIsBrandThemeVariantLoaded(true);\n            } else {\n              setIsParagonThemeVariantLoaded(true);\n            }\n          }\n        };\n\n        themeVariantLink.onerror = () => {\n          logError(`Failed to load theme variant (${themeVariant}) CSS from ${value.urls.default}`);\n          if (isFallbackThemeUrl) {\n            logError(`Could not load theme variant (${themeVariant}) CSS from fallback URL. Aborting.`);\n            if (isBrandOverride) {\n              setIsBrandThemeVariantLoaded(true);\n            } else {\n              setIsParagonThemeVariantLoaded(true);\n            }\n            const otherExistingLinks = getExistingThemeVariantLinks(isBrandOverride);\n            removeExistingLinks(otherExistingLinks);\n            return;\n          }\n          const paragonThemeAccessor = isBrandOverride ? 'brand' : 'paragon';\n          const themeUrls = PARAGON_THEME?.[paragonThemeAccessor]?.themeUrls ?? {};\n          if (themeUrls.variants && themeUrls.variants[themeVariant]) {\n            const themeVariantFallbackUrl = `${getConfig().BASE_URL}/${themeUrls.variants[themeVariant].fileName}`;\n            logInfo(`Falling back to locally installed theme variant (${themeVariant}) CSS: ${themeVariantFallbackUrl}`);\n            themeVariantLink = createThemeVariantLink(themeVariantFallbackUrl, {\n              isFallbackThemeUrl: true,\n              isBrandOverride,\n            });\n            const otherExistingLinks = getExistingThemeVariantLinks(isBrandOverride);\n            removeExistingLinks(otherExistingLinks);\n            const foundParagonThemeVariantLink = getParagonThemeVariantLink();\n            if (foundParagonThemeVariantLink) {\n              foundParagonThemeVariantLink.insertAdjacentElement(\n                'afterend',\n                themeVariantLink,\n              );\n            } else {\n              document.head.insertAdjacentElement(\n                'afterbegin',\n                themeVariantLink,\n              );\n            }\n          } else {\n            logError(`Failed to load theme variant (${themeVariant}) CSS from ${url} and locally installed fallback URL is not available. Aborting.`);\n            if (isBrandOverride) {\n              setIsBrandThemeVariantLoaded(true);\n            } else {\n              setIsParagonThemeVariantLoaded(true);\n            }\n          }\n        };\n        return themeVariantLink;\n      };\n\n      if (!existingThemeVariantLink) {\n        const paragonThemeVariantLink = createThemeVariantLink(value.urls.default);\n        document.head.insertAdjacentElement(\n          'afterbegin',\n          paragonThemeVariantLink,\n        );\n\n        if (value.urls.brandOverride) {\n          const brandThemeVariantLink = createThemeVariantLink(value.urls.brandOverride, { isBrandOverride: true });\n          const foundParagonThemeVariantLink = getParagonThemeVariantLink();\n          if (foundParagonThemeVariantLink) {\n            foundParagonThemeVariantLink.insertAdjacentElement(\n              'afterend',\n              brandThemeVariantLink,\n            );\n          } else {\n            document.head.insertAdjacentElement(\n              'afterbegin',\n              brandThemeVariantLink,\n            );\n          }\n        } else {\n          setIsBrandThemeVariantLoaded(true);\n        }\n      } else {\n        const updatedStylesheetRel = generateStylesheetRelAttr(themeVariant);\n        existingThemeVariantLink.rel = updatedStylesheetRel;\n        existingThemeVariantLink.removeAttribute('as');\n        if (existingThemeVariantBrandLink) {\n          existingThemeVariantBrandLink.rel = updatedStylesheetRel;\n          existingThemeVariantBrandLink.removeAttribute('as');\n        }\n        setIsParagonThemeVariantLoaded(true);\n        setIsBrandThemeVariantLoaded(true);\n      }\n    });\n  }, [themeVariants, currentThemeVariant, onLoad]);\n};\n\nexport default useParagonThemeVariants;\n"],"mappings":"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","ignoreList":[]}