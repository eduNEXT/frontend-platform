{"version":3,"file":"useParagonTheme.js","names":["useCallback","useEffect","useReducer","useState","useParagonThemeUrls","getDefaultThemeVariant","paragonThemeActions","paragonThemeReducer","useParagonThemeCore","SELECTED_THEME_VARIANT_KEY","logError","useParagonThemeVariants","useParagonTheme","config","paragonThemeUrls","core","themeCore","defaults","themeVariantDefaults","variants","themeVariants","initialParagonThemeState","isThemeLoaded","themeVariant","name","themeState","dispatch","isCoreThemeLoaded","setIsCoreThemeLoaded","onLoadThemeCore","hasLoadedThemeVariants","setHasLoadedThemeVariants","onLoadThemeVariants","onLoad","handleDarkModeSystemPreferenceChange","prefersDarkMode","localStorage","getItem","dark","setParagonThemeVariant","light","currentThemeVariant","onDarkModeSystemPreferenceChange","hasThemeConfig","urls","Object","keys","length","setParagonThemeLoaded"],"sources":["../../../../src/react/hooks/paragon/useParagonTheme.js"],"sourcesContent":["import {\n  useCallback, useEffect, useReducer, useState,\n} from 'react';\nimport useParagonThemeUrls from './useParagonThemeUrls';\nimport { getDefaultThemeVariant } from './utils';\nimport { paragonThemeActions, paragonThemeReducer } from '../../reducers';\nimport useParagonThemeCore from './useParagonThemeCore';\nimport { SELECTED_THEME_VARIANT_KEY } from '../../constants';\nimport { logError } from '../../../logging';\nimport useParagonThemeVariants from './useParagonThemeVariants';\n\n/**\n * Given the inputs of URLs to the CSS for the core application theme and the theme variants (e.g., light), this hook\n * will inject the CSS as `<link>` elements into the HTML document, loading each theme variant's CSS with an appropriate\n * priority based on whether its the currently active theme variant. This is done using \"alternate\" stylesheets. That\n * is,the browser will still download the CSS for the non-current theme variants, but at a lower priority than the\n * current theme variant's CSS. This ensures that if the theme variant is changed at runtime, the CSS for the new theme\n * variant will already be loaded.\n *\n * @memberof module:React\n * @param {object} config An object containing the URLs for the theme's core CSS and any theme (i.e., `getConfig()`)\n *\n * @returns An array containing 2 elements: 1) an object containing the app\n *  theme state, and 2) a dispatch function to mutate the app theme state.\n */\nconst useParagonTheme = (config) => {\n  const paragonThemeUrls = useParagonThemeUrls(config);\n  const {\n    core: themeCore,\n    defaults: themeVariantDefaults,\n    variants: themeVariants,\n  } = paragonThemeUrls || {};\n  const initialParagonThemeState = {\n    isThemeLoaded: false,\n    themeVariant: getDefaultThemeVariant({ themeVariants, themeVariantDefaults })?.name,\n  };\n  const [themeState, dispatch] = useReducer(paragonThemeReducer, initialParagonThemeState);\n\n  const [isCoreThemeLoaded, setIsCoreThemeLoaded] = useState(false);\n  const onLoadThemeCore = useCallback(() => {\n    setIsCoreThemeLoaded(true);\n  }, []);\n\n  const [hasLoadedThemeVariants, setHasLoadedThemeVariants] = useState(false);\n  const onLoadThemeVariants = useCallback(() => {\n    setHasLoadedThemeVariants(true);\n  }, []);\n\n  // load the core theme CSS\n  useParagonThemeCore({\n    themeCore,\n    onLoad: onLoadThemeCore,\n  });\n\n  // respond to system preference changes with regard to `prefers-color-scheme: dark`.\n  const handleDarkModeSystemPreferenceChange = useCallback((prefersDarkMode) => {\n    // Ignore system preference change if the theme variant is already set in localStorage.\n    if (localStorage.getItem(SELECTED_THEME_VARIANT_KEY)) {\n      return;\n    }\n\n    if (prefersDarkMode && themeVariantDefaults.dark) {\n      dispatch(paragonThemeActions.setParagonThemeVariant(themeVariantDefaults.dark));\n    } else if (!prefersDarkMode && themeVariantDefaults.light) {\n      dispatch(paragonThemeActions.setParagonThemeVariant(themeVariantDefaults.light));\n    } else {\n      logError(`Could not set theme variant based on system preference (prefers dark mode: ${prefersDarkMode})`, themeVariantDefaults, themeVariants);\n    }\n  }, [themeVariantDefaults, themeVariants]);\n\n  // load the theme variant(s) CSS\n  useParagonThemeVariants({\n    themeVariants,\n    onLoad: onLoadThemeVariants,\n    currentThemeVariant: themeState.themeVariant,\n    onDarkModeSystemPreferenceChange: handleDarkModeSystemPreferenceChange,\n  });\n\n  useEffect(() => {\n    // theme is already loaded, do nothing\n    if (themeState.isThemeLoaded) {\n      return;\n    }\n\n    const hasThemeConfig = (themeCore?.urls && Object.keys(themeVariants).length > 0);\n    if (!hasThemeConfig) {\n      // no theme URLs to load, set loading to false.\n      dispatch(paragonThemeActions.setParagonThemeLoaded(true));\n    }\n\n    // Return early if neither the core theme CSS nor any theme variant CSS is loaded.\n    if (!isCoreThemeLoaded || !hasLoadedThemeVariants) {\n      return;\n    }\n\n    // All application theme URLs are loaded\n    dispatch(paragonThemeActions.setParagonThemeLoaded(true));\n  }, [\n    themeState.isThemeLoaded,\n    isCoreThemeLoaded,\n    hasLoadedThemeVariants,\n    themeCore?.urls,\n    themeVariants,\n  ]);\n\n  return [themeState, dispatch];\n};\n\nexport default useParagonTheme;\n"],"mappings":"AAAA,SACEA,WAAW,EAAEC,SAAS,EAAEC,UAAU,EAAEC,QAAQ,QACvC,OAAO;AACd,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,SAASC,sBAAsB,QAAQ,SAAS;AAChD,SAASC,mBAAmB,EAAEC,mBAAmB,QAAQ,gBAAgB;AACzE,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,SAASC,0BAA0B,QAAQ,iBAAiB;AAC5D,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,OAAOC,uBAAuB,MAAM,2BAA2B;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAIC,MAAM,IAAK;EAClC,MAAMC,gBAAgB,GAAGV,mBAAmB,CAACS,MAAM,CAAC;EACpD,MAAM;IACJE,IAAI,EAAEC,SAAS;IACfC,QAAQ,EAAEC,oBAAoB;IAC9BC,QAAQ,EAAEC;EACZ,CAAC,GAAGN,gBAAgB,IAAI,CAAC,CAAC;EAC1B,MAAMO,wBAAwB,GAAG;IAC/BC,aAAa,EAAE,KAAK;IACpBC,YAAY,EAAElB,sBAAsB,CAAC;MAAEe,aAAa;MAAEF;IAAqB,CAAC,CAAC,EAAEM;EACjF,CAAC;EACD,MAAM,CAACC,UAAU,EAAEC,QAAQ,CAAC,GAAGxB,UAAU,CAACK,mBAAmB,EAAEc,wBAAwB,CAAC;EAExF,MAAM,CAACM,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM0B,eAAe,GAAG7B,WAAW,CAAC,MAAM;IACxC4B,oBAAoB,CAAC,IAAI,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM,CAACE,sBAAsB,EAAEC,yBAAyB,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC;EAC3E,MAAM6B,mBAAmB,GAAGhC,WAAW,CAAC,MAAM;IAC5C+B,yBAAyB,CAAC,IAAI,CAAC;EACjC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAvB,mBAAmB,CAAC;IAClBQ,SAAS;IACTiB,MAAM,EAAEJ;EACV,CAAC,CAAC;;EAEF;EACA,MAAMK,oCAAoC,GAAGlC,WAAW,CAAEmC,eAAe,IAAK;IAC5E;IACA,IAAIC,YAAY,CAACC,OAAO,CAAC5B,0BAA0B,CAAC,EAAE;MACpD;IACF;IAEA,IAAI0B,eAAe,IAAIjB,oBAAoB,CAACoB,IAAI,EAAE;MAChDZ,QAAQ,CAACpB,mBAAmB,CAACiC,sBAAsB,CAACrB,oBAAoB,CAACoB,IAAI,CAAC,CAAC;IACjF,CAAC,MAAM,IAAI,CAACH,eAAe,IAAIjB,oBAAoB,CAACsB,KAAK,EAAE;MACzDd,QAAQ,CAACpB,mBAAmB,CAACiC,sBAAsB,CAACrB,oBAAoB,CAACsB,KAAK,CAAC,CAAC;IAClF,CAAC,MAAM;MACL9B,QAAQ,CAAE,8EAA6EyB,eAAgB,GAAE,EAAEjB,oBAAoB,EAAEE,aAAa,CAAC;IACjJ;EACF,CAAC,EAAE,CAACF,oBAAoB,EAAEE,aAAa,CAAC,CAAC;;EAEzC;EACAT,uBAAuB,CAAC;IACtBS,aAAa;IACba,MAAM,EAAED,mBAAmB;IAC3BS,mBAAmB,EAAEhB,UAAU,CAACF,YAAY;IAC5CmB,gCAAgC,EAAER;EACpC,CAAC,CAAC;EAEFjC,SAAS,CAAC,MAAM;IACd;IACA,IAAIwB,UAAU,CAACH,aAAa,EAAE;MAC5B;IACF;IAEA,MAAMqB,cAAc,GAAI3B,SAAS,EAAE4B,IAAI,IAAIC,MAAM,CAACC,IAAI,CAAC1B,aAAa,CAAC,CAAC2B,MAAM,GAAG,CAAE;IACjF,IAAI,CAACJ,cAAc,EAAE;MACnB;MACAjB,QAAQ,CAACpB,mBAAmB,CAAC0C,qBAAqB,CAAC,IAAI,CAAC,CAAC;IAC3D;;IAEA;IACA,IAAI,CAACrB,iBAAiB,IAAI,CAACG,sBAAsB,EAAE;MACjD;IACF;;IAEA;IACAJ,QAAQ,CAACpB,mBAAmB,CAAC0C,qBAAqB,CAAC,IAAI,CAAC,CAAC;EAC3D,CAAC,EAAE,CACDvB,UAAU,CAACH,aAAa,EACxBK,iBAAiB,EACjBG,sBAAsB,EACtBd,SAAS,EAAE4B,IAAI,EACfxB,aAAa,CACd,CAAC;EAEF,OAAO,CAACK,UAAU,EAAEC,QAAQ,CAAC;AAC/B,CAAC;AAED,eAAed,eAAe","ignoreList":[]}