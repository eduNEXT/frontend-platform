{"version":3,"file":"hooks.js","names":["useCallback","useEffect","useState","useReducer","subscribe","unsubscribe","PARAGON_THEME_CORE","PARAGON_THEME_VARIANT_LIGHT","paragonThemeReducer","paragonThemeActions","useAppEvent","type","callback","subscriptionToken","cleanup","initialParagonThemeState","isThemeLoaded","themeVariant","useParagonThemeCore","coreThemeUrl","onLoad","coreThemeLink","document","head","querySelector","createElement","href","rel","onload","insertAdjacentElement","useParagonThemeVariants","themeVariantUrls","currentThemeVariant","onLoadThemeVariantLight","generateStylesheetRelAttr","setThemeVariantLoaded","Object","entries","forEach","themeVariantUrl","themeVariantLink","stylesheetRelForVariant","getParagonThemeUrls","config","PARAGON_THEME_URLS","PARAGON_THEME_CORE_URL","PARAGON_THEME_VARIANTS_LIGHT_URL","useParagonTheme","paragonThemeUrls","core","variants","themeState","dispatch","isCoreThemeLoaded","setIsCoreThemeLoaded","isLightThemeVariantLoaded","setIsLightThemeVariantLoaded","onLoadThemeCore","hasDefaultThemeConfig","setParagonThemeLoaded","isDefaultThemeLoaded"],"sources":["../../src/react/hooks.js"],"sourcesContent":["import {\n  useCallback, useEffect, useState, useReducer,\n} from 'react';\nimport { subscribe, unsubscribe } from '../pubSub';\nimport {\n  PARAGON_THEME_CORE,\n  PARAGON_THEME_VARIANT_LIGHT,\n} from './constants';\nimport { paragonThemeReducer, paragonThemeActions } from './reducers';\n\n/**\n * A React hook that allows functional components to subscribe to application events.  This should\n * be used sparingly - for the most part, Context should be used higher-up in the application to\n * provide necessary data to a given component, rather than utilizing a non-React-like Pub/Sub\n * mechanism.\n *\n * @memberof module:React\n * @param {string} type\n * @param {function} callback\n */\nexport const useAppEvent = (type, callback) => {\n  useEffect(() => {\n    const subscriptionToken = subscribe(type, callback);\n\n    return function cleanup() {\n      unsubscribe(subscriptionToken);\n    };\n  }, [callback, type]);\n};\n\nconst initialParagonThemeState = {\n  isThemeLoaded: false,\n  themeVariant: PARAGON_THEME_VARIANT_LIGHT,\n};\n\n/**\n * Adds/updates a `<link>` element in the HTML document to load the core application theme CSS.\n *\n * @memberof module:React\n * @param {object} args\n * @param {string} args.coreThemeUrl The url of the core theme CSS.\n * @param {string} args.onLoad A callback function called when the core theme CSS is loaded.\n */\nexport const useParagonThemeCore = ({\n  coreThemeUrl,\n  onLoad,\n}) => {\n  useEffect(() => {\n    // If there is no config for the core theme url, do nothing.\n    if (!coreThemeUrl) {\n      return;\n    }\n    let coreThemeLink = document.head.querySelector(`link[href='${coreThemeUrl}']`);\n    if (!coreThemeLink) {\n      coreThemeLink = document.createElement('link');\n      coreThemeLink.href = coreThemeUrl;\n      coreThemeLink.rel = 'stylesheet';\n      coreThemeLink.onload = () => {\n        onLoad();\n      };\n      document.head.insertAdjacentElement(\n        'afterbegin',\n        coreThemeLink,\n      );\n    }\n  }, [coreThemeUrl, onLoad]);\n};\n\n/**\n * Adds/updates a `<link>` element in the HTML document to load each theme variant's CSS, setting the\n * non-current theme variants as \"alternate\" stylesheets. That is, the browser will still download\n * the CSS for the non-current theme variants, but at a lower priority than the current theme\n * variant's CSS. This ensures that if the theme variant is changed at runtime, the CSS for the new\n * theme variant will already be loaded.\n *\n * Note: only \"light\" theme variant is currently supported.\n *\n * @memberof module:React\n * @param {object} args\n * @param {object} args.themeVariantUrls An object representing the URLs for each supported theme variant, e.g.: `{ light: 'https://path/to/light.css' }`.\n * @param {string} args.onLoad A callback function called when the core theme CSS is loaded.\n */\nconst useParagonThemeVariants = ({\n  themeVariantUrls,\n  currentThemeVariant,\n  onLoadThemeVariantLight,\n}) => {\n  useEffect(() => {\n    /**\n     * Determines the value for the `rel` attribute for a given theme variant based\n     * on if its the currently applied variant.\n     */\n    const generateStylesheetRelAttr = (themeVariant) => (currentThemeVariant === themeVariant ? 'stylesheet' : 'alternate stylesheet');\n\n    /**\n     * A helper function to determine which theme variant callback should be used\n     * based on the current theme variant.\n     */\n    const setThemeVariantLoaded = (themeVariant) => {\n      if (themeVariant === PARAGON_THEME_VARIANT_LIGHT) {\n        onLoadThemeVariantLight();\n      }\n    };\n\n    /**\n     * Iterate over each theme variant URL and inject it into the HTML document if it doesn't already exist.\n     */\n    Object.entries(themeVariantUrls).forEach(([themeVariant, themeVariantUrl]) => {\n      // If there is no config for the theme variant URL, set the theme variant to loaded and continue.\n      if (!themeVariantUrl) {\n        setThemeVariantLoaded(themeVariant);\n        return;\n      }\n      let themeVariantLink = document.head.querySelector(`link[href='${themeVariantUrl}']`);\n      const stylesheetRelForVariant = generateStylesheetRelAttr(themeVariant);\n      if (!themeVariantLink) {\n        themeVariantLink = document.createElement('link');\n        themeVariantLink.href = themeVariantUrl;\n        themeVariantLink.rel = stylesheetRelForVariant;\n        themeVariantLink.onload = () => {\n          setThemeVariantLoaded(themeVariant);\n        };\n        document.head.insertAdjacentElement(\n          'afterbegin',\n          themeVariantLink,\n        );\n      } else if (themeVariantLink.rel !== stylesheetRelForVariant) {\n        themeVariantLink.rel = stylesheetRelForVariant;\n      }\n    });\n  }, [themeVariantUrls, currentThemeVariant, onLoadThemeVariantLight]);\n};\n\n/**\n * TODO\n * @param {*} config\n * @returns\n */\nconst getParagonThemeUrls = (config) => {\n  if (config.PARAGON_THEME_URLS) {\n    return config.PARAGON_THEME_URLS;\n  }\n  return {\n    [PARAGON_THEME_CORE]: config.PARAGON_THEME_CORE_URL,\n    // [PARAGON_THEME_CORE]: undefined,\n    variants: {\n      [PARAGON_THEME_VARIANT_LIGHT]: config.PARAGON_THEME_VARIANTS_LIGHT_URL,\n      // [PARAGON_THEME_VARIANT_LIGHT]: undefined,\n    },\n  };\n};\n\n/**\n * Given the inputs of URLs to the CSS for the core application theme and the theme variants (e.g., light), this hook\n * will inject the CSS as `<link>` elements into the HTML document, loading each theme variant's CSS with an appropriate\n * priority based on whether its the currently active theme variant. This is done using \"alternate\" stylesheets. That\n * is,the browser will still download the CSS for the non-current theme variants, but at a lower priority than the\n * current theme variant's CSS. This ensures that if the theme variant is changed at runtime, the CSS for the new theme\n * variant will already be loaded.\n *\n * Note: only \"light\" theme variant is currently supported, though the intent is also support \"dark\" theme\n * variant in the future.\n *\n * @memberof module:React\n * @param {object} args\n * @param {object} args.themeUrls Should contain the URLs for the theme's core CSS and any theme\n *  variants, e.g. `{ core: 'https://path/to/core.css', variants: { light: 'https://path/to/light.css' } }`.\n *\n * @returns An array containing 2 elements: 1) an object containing the app\n *  theme state, and 2) a dispatch function to mutate the app theme state.\n */\nexport const useParagonTheme = (config) => {\n  const paragonThemeUrls = getParagonThemeUrls(config);\n  const {\n    core: coreThemeUrl,\n    variants: themeVariantUrls,\n  } = paragonThemeUrls;\n\n  const [themeState, dispatch] = useReducer(paragonThemeReducer, initialParagonThemeState);\n\n  const [isCoreThemeLoaded, setIsCoreThemeLoaded] = useState(false);\n  const [isLightThemeVariantLoaded, setIsLightThemeVariantLoaded] = useState(false);\n\n  const onLoadThemeCore = useCallback(() => {\n    setIsCoreThemeLoaded(true);\n  }, []);\n\n  const onLoadThemeVariantLight = useCallback(() => {\n    setIsLightThemeVariantLoaded(true);\n  }, []);\n\n  // load the core theme CSS\n  useParagonThemeCore({\n    coreThemeUrl,\n    onLoad: onLoadThemeCore,\n  });\n\n  // load the theme variant(s) CSS\n  useParagonThemeVariants({\n    themeVariantUrls,\n    onLoadThemeVariantLight,\n    currentThemeVariant: themeState.themeVariant,\n  });\n\n  useEffect(() => {\n    // theme is already loaded, do nothing\n    if (themeState.isThemeLoaded) {\n      return;\n    }\n\n    // the core theme and light theme variant is still loading, do nothing.\n    const hasDefaultThemeConfig = (coreThemeUrl && themeVariantUrls[PARAGON_THEME_VARIANT_LIGHT]);\n    if (!hasDefaultThemeConfig) {\n      // no theme URLs to load, set loading to false.\n      dispatch(paragonThemeActions.setParagonThemeLoaded(true));\n    }\n\n    const isDefaultThemeLoaded = (isCoreThemeLoaded && isLightThemeVariantLoaded);\n    if (!isDefaultThemeLoaded) {\n      return;\n    }\n\n    // All application theme URLs are loaded\n    dispatch(paragonThemeActions.setParagonThemeLoaded(true));\n  }, [\n    themeState.isThemeLoaded,\n    isCoreThemeLoaded,\n    isLightThemeVariantLoaded,\n    themeVariantUrls,\n    coreThemeUrl,\n  ]);\n\n  return [themeState, dispatch];\n};\n"],"mappings":"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"}