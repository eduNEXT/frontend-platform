{"version":3,"file":"hooks.js","names":["useCallback","useEffect","useState","useReducer","subscribe","unsubscribe","PARAGON_THEME_CORE","PARAGON_THEME_VARIANT_LIGHT","paragonThemeReducer","paragonThemeActions","useAppEvent","type","callback","subscriptionToken","cleanup","initialParagonThemeState","isThemeLoaded","themeVariant","useParagonThemeCore","coreThemeUrl","onLoad","coreThemeLink","document","head","querySelector","createElement","href","rel","onload","insertAdjacentElement","useParagonThemeVariants","themeVariantUrls","currentThemeVariant","onLoadThemeVariantLight","generateStylesheetRelAttr","setThemeVariantLoaded","Object","entries","forEach","themeVariantUrl","themeVariantLink","stylesheetRelForVariant","getParagonThemeUrls","config","PARAGON_THEME_URLS","PARAGON_THEME_CORE_URL","PARAGON_THEME_VARIANTS_LIGHT_URL","useParagonTheme","paragonThemeUrls","core","variants","themeState","dispatch","isCoreThemeLoaded","setIsCoreThemeLoaded","isLightThemeVariantLoaded","setIsLightThemeVariantLoaded","onLoadThemeCore","hasDefaultThemeConfig","setParagonThemeLoaded","isDefaultThemeLoaded"],"sources":["../../src/react/hooks.js"],"sourcesContent":["import {\n  useCallback, useEffect, useState, useReducer,\n} from 'react';\nimport { subscribe, unsubscribe } from '../pubSub';\nimport {\n  PARAGON_THEME_CORE,\n  PARAGON_THEME_VARIANT_LIGHT,\n} from './constants';\nimport { paragonThemeReducer, paragonThemeActions } from './reducers';\n\n/**\n * A React hook that allows functional components to subscribe to application events.  This should\n * be used sparingly - for the most part, Context should be used higher-up in the application to\n * provide necessary data to a given component, rather than utilizing a non-React-like Pub/Sub\n * mechanism.\n *\n * @memberof module:React\n * @param {string} type\n * @param {function} callback\n */\nexport const useAppEvent = (type, callback) => {\n  useEffect(() => {\n    const subscriptionToken = subscribe(type, callback);\n\n    return function cleanup() {\n      unsubscribe(subscriptionToken);\n    };\n  }, [callback, type]);\n};\n\nconst initialParagonThemeState = {\n  isThemeLoaded: false,\n  themeVariant: PARAGON_THEME_VARIANT_LIGHT,\n};\n\n/**\n * Adds/updates a `<link>` element in the HTML document to load the core application theme CSS.\n *\n * @memberof module:React\n * @param {object} args\n * @param {string} args.coreThemeUrl The url of the core theme CSS.\n * @param {string} args.onLoad A callback function called when the core theme CSS is loaded.\n */\nexport const useParagonThemeCore = ({\n  coreThemeUrl,\n  onLoad,\n}) => {\n  useEffect(() => {\n    // If there is no config for the core theme url, do nothing.\n    if (!coreThemeUrl) {\n      return;\n    }\n    let coreThemeLink = document.head.querySelector(`link[href='${coreThemeUrl}']`);\n    if (!coreThemeLink) {\n      coreThemeLink = document.createElement('link');\n      coreThemeLink.href = coreThemeUrl;\n      coreThemeLink.rel = 'stylesheet';\n      coreThemeLink.onload = () => {\n        onLoad();\n      };\n      document.head.insertAdjacentElement(\n        'afterbegin',\n        coreThemeLink,\n      );\n    }\n  }, [coreThemeUrl, onLoad]);\n};\n\n/**\n * Adds/updates a `<link>` element in the HTML document to load each theme variant's CSS, setting the\n * non-current theme variants as \"alternate\" stylesheets. That is, the browser will still download\n * the CSS for the non-current theme variants, but at a lower priority than the current theme\n * variant's CSS. This ensures that if the theme variant is changed at runtime, the CSS for the new\n * theme variant will already be loaded.\n *\n * Note: only \"light\" theme variant is currently supported.\n *\n * @memberof module:React\n * @param {object} args\n * @param {object} args.themeVariantUrls An object representing the URLs for each supported theme variant, e.g.: `{ light: 'https://path/to/light.css' }`.\n * @param {string} args.onLoad A callback function called when the core theme CSS is loaded.\n */\nconst useParagonThemeVariants = ({\n  themeVariantUrls,\n  currentThemeVariant,\n  onLoadThemeVariantLight,\n}) => {\n  useEffect(() => {\n    /**\n     * Determines the value for the `rel` attribute for a given theme variant based\n     * on if its the currently applied variant.\n     */\n    const generateStylesheetRelAttr = (themeVariant) => (currentThemeVariant === themeVariant ? 'stylesheet' : 'alternate stylesheet');\n\n    /**\n     * A helper function to determine which theme variant callback should be used\n     * based on the current theme variant.\n     */\n    const setThemeVariantLoaded = (themeVariant) => {\n      if (themeVariant === PARAGON_THEME_VARIANT_LIGHT) {\n        onLoadThemeVariantLight();\n      }\n    };\n\n    /**\n     * Iterate over each theme variant URL and inject it into the HTML document if it doesn't already exist.\n     */\n    Object.entries(themeVariantUrls).forEach(([themeVariant, themeVariantUrl]) => {\n      // If there is no config for the theme variant URL, set the theme variant to loaded and continue.\n      if (!themeVariantUrl) {\n        setThemeVariantLoaded(themeVariant);\n        return;\n      }\n      let themeVariantLink = document.head.querySelector(`link[href='${themeVariantUrl}']`);\n      const stylesheetRelForVariant = generateStylesheetRelAttr(themeVariant);\n      if (!themeVariantLink) {\n        themeVariantLink = document.createElement('link');\n        themeVariantLink.href = themeVariantUrl;\n        themeVariantLink.rel = stylesheetRelForVariant;\n        themeVariantLink.onload = () => {\n          setThemeVariantLoaded(themeVariant);\n        };\n        document.head.insertAdjacentElement(\n          'beforeend',\n          themeVariantLink,\n        );\n      } else if (themeVariantLink.rel !== stylesheetRelForVariant) {\n        themeVariantLink.rel = stylesheetRelForVariant;\n      }\n    });\n  }, [themeVariantUrls, currentThemeVariant, onLoadThemeVariantLight]);\n};\n\n/**\n * TODO\n * @param {*} config\n * @returns\n */\nconst getParagonThemeUrls = (config) => {\n  if (config.PARAGON_THEME_URLS) {\n    return config.PARAGON_THEME_URLS;\n  }\n  return {\n    [PARAGON_THEME_CORE]: config.PARAGON_THEME_CORE_URL,\n    // [PARAGON_THEME_CORE]: undefined,\n    variants: {\n      [PARAGON_THEME_VARIANT_LIGHT]: config.PARAGON_THEME_VARIANTS_LIGHT_URL,\n      // [PARAGON_THEME_VARIANT_LIGHT]: undefined,\n    },\n  };\n};\n\n/**\n * Given the inputs of URLs to the CSS for the core application theme and the theme variants (e.g., light), this hook\n * will inject the CSS as `<link>` elements into the HTML document, loading each theme variant's CSS with an appropriate\n * priority based on whether its the currently active theme variant. This is done using \"alternate\" stylesheets. That\n * is,the browser will still download the CSS for the non-current theme variants, but at a lower priority than the\n * current theme variant's CSS. This ensures that if the theme variant is changed at runtime, the CSS for the new theme\n * variant will already be loaded.\n *\n * Note: only \"light\" theme variant is currently supported, though the intent is also support \"dark\" theme\n * variant in the future.\n *\n * @memberof module:React\n * @param {object} args\n * @param {object} args.themeUrls Should contain the URLs for the theme's core CSS and any theme\n *  variants, e.g. `{ core: 'https://path/to/core.css', variants: { light: 'https://path/to/light.css' } }`.\n *\n * @returns An array containing 2 elements: 1) an object containing the app\n *  theme state, and 2) a dispatch function to mutate the app theme state.\n */\nexport const useParagonTheme = (config) => {\n  const paragonThemeUrls = getParagonThemeUrls(config);\n  const {\n    core: coreThemeUrl,\n    variants: themeVariantUrls,\n  } = paragonThemeUrls;\n\n  const [themeState, dispatch] = useReducer(paragonThemeReducer, initialParagonThemeState);\n\n  const [isCoreThemeLoaded, setIsCoreThemeLoaded] = useState(false);\n  const [isLightThemeVariantLoaded, setIsLightThemeVariantLoaded] = useState(false);\n\n  const onLoadThemeCore = useCallback(() => {\n    setIsCoreThemeLoaded(true);\n  }, []);\n\n  const onLoadThemeVariantLight = useCallback(() => {\n    setIsLightThemeVariantLoaded(true);\n  }, []);\n\n  // load the core theme CSS\n  useParagonThemeCore({\n    coreThemeUrl,\n    onLoad: onLoadThemeCore,\n  });\n\n  // load the theme variant(s) CSS\n  useParagonThemeVariants({\n    themeVariantUrls,\n    onLoadThemeVariantLight,\n    currentThemeVariant: themeState.themeVariant,\n  });\n\n  useEffect(() => {\n    // theme is already loaded, do nothing\n    if (themeState.isThemeLoaded) {\n      return;\n    }\n\n    // the core theme and light theme variant is still loading, do nothing.\n    const hasDefaultThemeConfig = (coreThemeUrl && themeVariantUrls[PARAGON_THEME_VARIANT_LIGHT]);\n    if (!hasDefaultThemeConfig) {\n      // no theme URLs to load, set loading to false.\n      dispatch(paragonThemeActions.setParagonThemeLoaded(true));\n    }\n\n    const isDefaultThemeLoaded = (isCoreThemeLoaded && isLightThemeVariantLoaded);\n    if (!isDefaultThemeLoaded) {\n      return;\n    }\n\n    // All application theme URLs are loaded\n    dispatch(paragonThemeActions.setParagonThemeLoaded(true));\n  }, [\n    themeState.isThemeLoaded,\n    isCoreThemeLoaded,\n    isLightThemeVariantLoaded,\n    themeVariantUrls,\n    coreThemeUrl,\n  ]);\n\n  return [themeState, dispatch];\n};\n"],"mappings":"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"}