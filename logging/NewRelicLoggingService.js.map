{"version":3,"file":"NewRelicLoggingService.js","names":["MAX_ERROR_LENGTH","fixErrorLength","error","message","length","processedError","Object","create","substring","pageActionNameInfo","pageActionNameIgnoredError","sendPageAction","actionName","customAttributes","process","env","NODE_ENV","console","log","window","newrelic","addPageAction","sendError","noticeError","NewRelicLoggingService","options","config","undefined","ignoredErrorRegexes","IGNORED_ERROR_REGEX","infoStringOrErrorObject","customAttrs","infoCustomAttributes","errorStringOrObject","errorCustomAttributes","allCustomAttributes","keys","errorMessage","match"],"sources":["../../src/logging/NewRelicLoggingService.js"],"sourcesContent":["/**\n * NewRelic will not log an error if it is too long.\n *\n * @ignore\n */\nexport const MAX_ERROR_LENGTH = 4000;\n\nfunction fixErrorLength(error) {\n  if (error.message && error.message.length > MAX_ERROR_LENGTH) {\n    const processedError = Object.create(error);\n    processedError.message = processedError.message.substring(0, MAX_ERROR_LENGTH);\n    return processedError;\n  }\n  if (typeof error === 'string' && error.length > MAX_ERROR_LENGTH) {\n    return error.substring(0, MAX_ERROR_LENGTH);\n  }\n  return error;\n}\n\n/* Constants used as New Relic page action names. */\nconst pageActionNameInfo = 'INFO';\nconst pageActionNameIgnoredError = 'IGNORED_ERROR';\n\nfunction sendPageAction(actionName, message, customAttributes) {\n  if (process.env.NODE_ENV === 'development') {\n    console.log(message, customAttributes); // eslint-disable-line\n  }\n  if (window && typeof window.newrelic !== 'undefined') {\n    window.newrelic.addPageAction(actionName, { message, ...customAttributes });\n  }\n}\n\nfunction sendError(error, customAttributes) {\n  if (process.env.NODE_ENV === 'development') {\n    console.error(error, customAttributes); // eslint-disable-line\n  }\n  if (window && typeof window.newrelic !== 'undefined') {\n    window.newrelic.noticeError(fixErrorLength(error), customAttributes);\n  }\n}\n\n/**\n * The NewRelicLoggingService is a concrete implementation of the logging service interface that\n * sends messages to NewRelic that can be seen in NewRelic Browser and NewRelic Insights. When in\n * development mode, all messages will instead be sent to the console.\n *\n * When you use `logError`, your errors will be checked to see if they're ignored *or* not.\n * Not-ignored errors will appear under \"JS errors\" for your Browser application.\n *\n * ```\n * SELECT * from JavaScriptError WHERE errorStatus is not null SINCE 10 days ago\n * ```\n *\n * Ignored errors will appear in New Relic Insights as page actions, which can be queried:\n *\n * ```\n * SELECT * from PageAction WHERE actionName = 'IGNORED_ERROR' SINCE 1 hour ago\n * ```\n *\n * When using `logInfo`, these only appear in New Relic Insights when querying for page actions as\n * follows:\n *\n * ```\n * SELECT * from PageAction WHERE actionName = 'INFO' SINCE 1 hour ago\n * ```\n *\n * You can also add your own custom metrics as an additional argument, or see the code to find\n * other standard custom attributes.\n *\n * Requires the NewRelic Browser JavaScript snippet.\n *\n * @implements {LoggingService}\n * @memberof module:Logging\n */\nexport default class NewRelicLoggingService {\n  constructor(options) {\n    const config = options ? options.config : undefined;\n    /*\n        String which is an explicit error message regex. If an error message matches the regex, the error\n        is considered an *ignored* error and submitted to New Relic as a page action - not an error.\n\n        Ignored error regexes are configured per frontend application (MFE).\n\n        The regex for all ignored errors are represented in the .env files as a single string. If you need to\n        ignore multiple errors, use the standard `|` regex syntax.\n\n        For example, here's a .env line which ignores two specific errors:\n\n        IGNORED_ERROR_REGEX='^\\\\[frontend-auth\\\\] Unimportant Error|Specific non-critical error #[\\\\d]+'\n\n        This example would ignore errors with the following messages:\n\n        [frontend-app-generic] - Specific non-critical error #45678 happened.\n        [frontend-app-generic] - Specific non-critical error #93475 happened.\n        [frontend-auth] Unimportant Error: Browser strangeness occurred.\n\n        To test your regex additions, use a JS CLI environment (such as node) and run code like this:\n\n        x = new RegExp('^\\\\[frontend-auth\\\\] Unimportant Error|Specific non-critical error #[\\\\d]+');\n        '[frontend-app-generic] - Specific non-critical error #45678 happened.'.match(x);\n        '[frontend-auth] Unimportant Error: Browser strangeness occurred.'.match(x);\n        'This error should not match anything!'.match(x);\n\n        For edx.org, add new error message regexes in edx-internal YAML as needed.\n    */\n    this.ignoredErrorRegexes = config ? config.IGNORED_ERROR_REGEX : undefined;\n  }\n\n  /**\n   *\n   *\n   * @param {*} infoStringOrErrorObject\n   * @param {*} [customAttributes={}]\n   * @memberof NewRelicLoggingService\n   */\n  logInfo(infoStringOrErrorObject, customAttributes = {}) {\n    let message = infoStringOrErrorObject;\n    let customAttrs = customAttributes;\n    if (typeof infoStringOrErrorObject === 'object' && 'message' in infoStringOrErrorObject) {\n      /* Caller has passed in an error object to be logged as a page action. */\n      /* Extract the attributes and the message. */\n      const infoCustomAttributes = infoStringOrErrorObject.customAttributes || {};\n      customAttrs = { ...infoCustomAttributes, ...customAttributes };\n      message = infoStringOrErrorObject.message;\n    }\n    sendPageAction(pageActionNameInfo, message, customAttrs);\n  }\n\n  /**\n   *\n   *\n   * @param {*} errorStringOrObject\n   * @param {*} [customAttributes={}]\n   * @memberof NewRelicLoggingService\n   */\n  logError(errorStringOrObject, customAttributes = {}) {\n    const errorCustomAttributes = errorStringOrObject.customAttributes || {};\n    let allCustomAttributes = { ...errorCustomAttributes, ...customAttributes };\n    if (Object.keys(allCustomAttributes).length === 0) {\n      // noticeError expects undefined if there are no custom attributes.\n      allCustomAttributes = undefined;\n    }\n\n    /*\n        Separate the errors into ignored errors and other errors.\n        Ignored errors are logged via adding a page action.\n        Other errors are logged via noticeError and count as \"JS Errors\" for the application.\n    */\n    const errorMessage = errorStringOrObject.message || (typeof errorStringOrObject === 'string' ? errorStringOrObject : '');\n    if (this.ignoredErrorRegexes && errorMessage.match(this.ignoredErrorRegexes)) {\n      /* ignored error */\n      sendPageAction(pageActionNameIgnoredError, errorMessage, allCustomAttributes);\n    } else {\n      /*  error! */\n      sendError(errorStringOrObject, allCustomAttributes);\n    }\n  }\n}\n"],"mappings":"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"}