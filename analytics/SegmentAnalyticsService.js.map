{"version":3,"file":"SegmentAnalyticsService.js","names":["formurlencoded","snakeCaseObject","SegmentAnalyticsService","httpClient","loggingService","config","trackingLogApiUrl","LMS_BASE_URL","segmentKey","SEGMENT_KEY","hasIdentifyBeenCalled","segmentInitialized","initializeSegment","global","analytics","initialize","invoked","methods","factory","method","args","unshift","push","forEach","key","load","options","script","document","createElement","type","onerror","event","Event","dispatchEvent","async","src","first","getElementsByTagName","parentNode","insertBefore","_loadOptions","SNIPPET_VERSION","logError","eventName","properties","snakeEventData","deep","serverData","event_type","JSON","stringify","page","location","href","post","headers","error","userId","traits","Error","identify","Promise","resolve","reject","ready","user","id","reset","addEventListener","setTimeout","ga","create","google_tag_manager","checkIdentifyCalled","track","category","name"],"sources":["../../src/analytics/SegmentAnalyticsService.js"],"sourcesContent":["import formurlencoded from 'form-urlencoded';\nimport { snakeCaseObject } from '../utils';\n\n/**\n * @implements {AnalyticsService}\n * @memberof module:Analytics\n */\nclass SegmentAnalyticsService {\n  constructor({ httpClient, loggingService, config }) {\n    this.loggingService = loggingService;\n    this.httpClient = httpClient;\n    this.trackingLogApiUrl = `${config.LMS_BASE_URL}/event`;\n    this.segmentKey = config.SEGMENT_KEY;\n    this.hasIdentifyBeenCalled = false;\n    this.segmentInitialized = false;\n\n    if (this.segmentKey) {\n      this.initializeSegment();\n    }\n  }\n\n  // The code in this function is from Segment's website, with a few updates:\n  // - It uses the segmentKey from the SegmentAnalyticsService instance.\n  // - It also saves a \"segmentInitialized\" variable on the SegmentAnalyticsService instance so\n  //   that the service can keep track of its own initialization state.\n  // Reference:\n  // https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/quickstart/\n  initializeSegment() {\n    // Create a queue, but don't obliterate an existing one!\n    global.analytics = global.analytics || [];\n    const { analytics } = global;\n\n    // If the real analytics.js is already on the page return.\n    if (analytics.initialize) {\n      this.segmentInitialized = true;\n      return;\n    }\n\n    // If the snippet was invoked do nothing.\n    if (analytics.invoked) {\n      this.segmentInitialized = true;\n      return;\n    }\n\n    // Invoked flag, to make sure the snippet\n    // is never invoked twice.\n    analytics.invoked = true;\n\n    // A list of the methods in Analytics.js to stub.\n    analytics.methods = [\n      'trackSubmit',\n      'trackClick',\n      'trackLink',\n      'trackForm',\n      'pageview',\n      'identify',\n      'reset',\n      'group',\n      'track',\n      'ready',\n      'alias',\n      'debug',\n      'page',\n      'once',\n      'off',\n      'on',\n    ];\n\n    // Define a factory to create stubs. These are placeholders\n    // for methods in Analytics.js so that you never have to wait\n    // for it to load to actually record data. The `method` is\n    // stored as the first argument, so we can replay the data.\n    analytics.factory = method => ((...args) => {\n      args.unshift(method);\n      analytics.push(args);\n      return analytics;\n    });\n\n    // For each of our methods, generate a queueing stub.\n    analytics.methods.forEach((key) => {\n      analytics[key] = analytics.factory(key);\n    });\n\n    // Define a method to load Analytics.js from our CDN,\n    // and that will be sure to only ever load it once.\n    analytics.load = (key, options) => {\n      // Create an async script element based on your key.\n      const script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.onerror = () => {\n        this.segmentInitialized = false;\n        const event = new Event('segmentFailed');\n        document.dispatchEvent(event);\n      };\n      script.async = true;\n      script.src = `https://cdn.segment.com/analytics.js/v1/${key}/analytics.min.js`;\n\n      // Insert our script next to the first script element.\n      const first = document.getElementsByTagName('script')[0];\n      first.parentNode.insertBefore(script, first);\n      analytics._loadOptions = options; // eslint-disable-line no-underscore-dangle\n\n      this.segmentInitialized = true;\n    };\n\n    // Add a version to keep track of what's in the wild.\n    analytics.SNIPPET_VERSION = '4.1.0';\n\n    // Load Analytics.js with your key, which will automatically\n    // load the tools you've enabled for your account. Boosh!\n    analytics.load(this.segmentKey);\n  }\n\n  /**\n   * Checks that identify was first called.  Otherwise, logs error.\n   *\n   */\n  checkIdentifyCalled() {\n    if (!this.hasIdentifyBeenCalled) {\n      this.loggingService.logError('Identify must be called before other tracking events.');\n    }\n  }\n\n  /**\n   * Logs events to tracking log and downstream.\n   * For tracking log event documentation, see\n   * https://openedx.atlassian.net/wiki/spaces/AN/pages/13205895/Event+Design+and+Review+Process\n   *\n   * @param {string} eventName (event_type on backend, but named to match Segment api)\n   * @param {Object} properties (event on backend, but named properties to match Segment api)\n   * @returns {Promise} The promise returned by HttpClient.post.\n   */\n  sendTrackingLogEvent(eventName, properties) {\n    const snakeEventData = snakeCaseObject(properties, { deep: true });\n    const serverData = {\n      event_type: eventName,\n      event: JSON.stringify(snakeEventData),\n      page: global.location.href,\n    };\n    return this.httpClient.post(\n      this.trackingLogApiUrl,\n      formurlencoded(serverData),\n      {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      },\n    ).catch((error) => {\n      this.loggingService.logError(error);\n    });\n  }\n\n  /**\n   * * Send identify call to Segment.\n   *\n   * @param {string} userId\n   * @param {*} [traits]\n   */\n  identifyAuthenticatedUser(userId, traits) {\n    if (!userId) {\n      throw new Error('UserId is required for identifyAuthenticatedUser.');\n    }\n\n    if (!this.segmentInitialized) {\n      return;\n    }\n    global.analytics.identify(userId, traits);\n    this.hasIdentifyBeenCalled = true;\n  }\n\n  /**\n   * Send anonymous identify call to Segment's identify.\n   *\n   * @param {*} [traits]\n   * @returns {Promise} Promise that will resolve once the document readyState is complete\n   */\n  identifyAnonymousUser(traits) { // eslint-disable-line no-unused-vars\n    if (!this.segmentInitialized) {\n      return Promise.resolve();\n    }\n    // if we do not have an authenticated user (indicated by being in this method),\n    // but we still have a user id associated in segment, reset the local segment state\n    // This has to be wrapped in the analytics.ready() callback because the analytics.user()\n    // function isn't available until the analytics.js package has finished initializing.\n    return new Promise((resolve, reject) => { // eslint-disable-line no-unused-vars\n      global.analytics.ready(() => {\n        if (global.analytics.user().id()) {\n          global.analytics.reset();\n        }\n        // We donâ€™t need to call `identify` for anonymous users and can just make the value of\n        // hasIdentifyBeenCalled true. Segment automatically assigns them an anonymousId, so\n        // just calling `page` and `track` works fine without identify.\n        this.hasIdentifyBeenCalled = true;\n        resolve();\n      });\n\n      // this is added to handle a specific use-case where if a user has blocked the analytics\n      // tools in their browser, this promise does not get resolved and user sees a blank\n      // page. Dispatching this event in script.onerror callback in analytics.load.\n      document.addEventListener('segmentFailed', resolve);\n      // This is added to handle the google analytics blocked case which is injected into\n      // the DOM by segment.min.js.\n      setTimeout(() => {\n        if (!global.ga || !global.ga.create || !global.google_tag_manager) {\n          this.segmentInitialized = false;\n          resolve();\n        }\n      }, 2000);\n    });\n  }\n\n  /**\n   * Sends a track event to Segment and downstream.\n   * Note: For links and forms, you should use trackLink and trackForm instead.\n   *\n   * @param {*} eventName\n   * @param {*} [properties]\n   */\n  sendTrackEvent(eventName, properties) {\n    if (!this.segmentInitialized) {\n      return;\n    }\n    this.checkIdentifyCalled();\n    global.analytics.track(eventName, properties);\n  }\n\n  /**\n   * Sends a page event to Segment and downstream.\n   *\n   * @param {*} [name] If only one string arg provided, assumed to be name.\n   * @param {*} [category] Name is required to pass a category.\n   * @param {*} [properties]\n   */\n  sendPageEvent(category, name, properties) {\n    if (!this.segmentInitialized) {\n      return;\n    }\n    this.checkIdentifyCalled();\n    global.analytics.page(category, name, properties);\n  }\n}\n\nexport default SegmentAnalyticsService;\n"],"mappings":"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"}