{"version":3,"sources":["../../src/analytics/MockAnalyticsService.js"],"names":["MockAnalyticsService","httpClient","loggingService","jest","fn","hasIdentifyBeenCalled","logError","Promise","resolve","userId","Error","checkIdentifyCalled"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACMA,oB,GAGJ,oCAA4C;AAAA;;AAAA,MAA9BC,UAA8B,QAA9BA,UAA8B;AAAA,MAAlBC,cAAkB,QAAlBA,cAAkB;;AAAA;;AAAA,+CAKtBC,IAAI,CAACC,EAAL,CAAQ,YAAM;AAClC,QAAI,CAAC,KAAI,CAACC,qBAAV,EAAiC;AAC/B,MAAA,KAAI,CAACH,cAAL,CAAoBI,QAApB,CAA6B,uDAA7B;AACD;AACF,GAJqB,CALsB;;AAAA,gDAgBrBH,IAAI,CAACC,EAAL,CAAQ;AAAA,WAAMG,OAAO,CAACC,OAAR,EAAN;AAAA,GAAR,CAhBqB;;AAAA,qDAwBhBL,IAAI,CAACC,EAAL,CAAQ,UAACK,MAAD,EAAY;AAC9C,QAAI,CAACA,MAAL,EAAa;AACX,YAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;AACD;;AACD,IAAA,KAAI,CAACL,qBAAL,GAA6B,IAA7B;AACD,GAL2B,CAxBgB;;AAAA,iDAmCpBF,IAAI,CAACC,EAAL,CAAQ,YAAM;AACpC,IAAA,KAAI,CAACC,qBAAL,GAA6B,IAA7B;AACA,WAAOE,OAAO,CAACC,OAAR,EAAP;AACD,GAHuB,CAnCoB;;AAAA,0CA6C3BL,IAAI,CAACC,EAAL,CAAQ,YAAM;AAC7B,IAAA,KAAI,CAACO,mBAAL;AACD,GAFgB,CA7C2B;;AAAA,yCAsD5BR,IAAI,CAACC,EAAL,CAAQ,YAAM;AAC5B,IAAA,KAAI,CAACO,mBAAL;AACD,GAFe,CAtD4B;;AAC1C,OAAKT,cAAL,GAAsBA,cAAtB;AACA,OAAKD,UAAL,GAAkBA,UAAlB;AACD,C;;gBANGD,oB,2BAC2B,K;;AA6DjC,eAAeA,oBAAf","sourcesContent":["/**\n * The MockAnalyticsService implements all functions of AnalyticsService as Jest mocks (jest.fn())).\n * It emulates the behavior of a real analytics service but witohut making any requests. It has no\n * other functionality.\n *\n * @implements {AnalyticsService}\n * @memberof module:Analytics\n */\nclass MockAnalyticsService {\n  static hasIdentifyBeenCalled = false;\n\n  constructor({ httpClient, loggingService }) {\n    this.loggingService = loggingService;\n    this.httpClient = httpClient;\n  }\n\n  checkIdentifyCalled = jest.fn(() => {\n    if (!this.hasIdentifyBeenCalled) {\n      this.loggingService.logError('Identify must be called before other tracking events.');\n    }\n  });\n\n  /**\n   * Returns a resolved promise.\n   *\n   * @returns {Promise} The promise returned by HttpClient.post.\n   */\n  sendTrackingLogEvent = jest.fn(() => Promise.resolve());\n\n  /**\n   * No-op, but records that identify has been called.\n   *\n   * @param {string} userId\n   * @throws {Error} If userId argument is not supplied.\n   */\n  identifyAuthenticatedUser = jest.fn((userId) => {\n    if (!userId) {\n      throw new Error('UserId is required for identifyAuthenticatedUser.');\n    }\n    this.hasIdentifyBeenCalled = true;\n  });\n\n  /**\n   * No-op, but records that it has been called to prevent double-identification.\n   * @returns {Promise} A resolved promise.\n   */\n  identifyAnonymousUser = jest.fn(() => {\n    this.hasIdentifyBeenCalled = true;\n    return Promise.resolve();\n  });\n\n  /**\n   * Logs the event to the console.\n   *\n   * Checks whether identify has been called, logging an error to the logging service if not.\n   */\n  sendTrackEvent = jest.fn(() => {\n    this.checkIdentifyCalled();\n  });\n\n  /**\n   * Logs the event to the console.\n   *\n   * Checks whether identify has been called, logging an error to the logging service if not.\n   */\n  sendPageEvent = jest.fn(() => {\n    this.checkIdentifyCalled();\n  });\n}\n\nexport default MockAnalyticsService;\n"],"file":"MockAnalyticsService.js"}