{"version":3,"file":"MockAnalyticsService.js","names":["MockAnalyticsService","constructor","_ref","httpClient","loggingService","_defineProperty","jest","fn","hasIdentifyBeenCalled","logError","Promise","resolve","userId","Error","checkIdentifyCalled"],"sources":["../../src/analytics/MockAnalyticsService.js"],"sourcesContent":["/**\n * The MockAnalyticsService implements all functions of AnalyticsService as Jest mocks (jest.fn())).\n * It emulates the behavior of a real analytics service but witohut making any requests. It has no\n * other functionality.\n *\n * @implements {AnalyticsService}\n * @memberof module:Analytics\n */\nclass MockAnalyticsService {\n  static hasIdentifyBeenCalled = false;\n\n  constructor({ httpClient, loggingService }) {\n    this.loggingService = loggingService;\n    this.httpClient = httpClient;\n  }\n\n  checkIdentifyCalled = jest.fn(() => {\n    if (!this.hasIdentifyBeenCalled) {\n      this.loggingService.logError('Identify must be called before other tracking events.');\n    }\n  });\n\n  /**\n   * Returns a resolved promise.\n   *\n   * @returns {Promise} The promise returned by HttpClient.post.\n   */\n  sendTrackingLogEvent = jest.fn(() => Promise.resolve());\n\n  /**\n   * No-op, but records that identify has been called.\n   *\n   * @param {string} userId\n   * @throws {Error} If userId argument is not supplied.\n   */\n  identifyAuthenticatedUser = jest.fn((userId) => {\n    if (!userId) {\n      throw new Error('UserId is required for identifyAuthenticatedUser.');\n    }\n    this.hasIdentifyBeenCalled = true;\n  });\n\n  /**\n   * No-op, but records that it has been called to prevent double-identification.\n   * @returns {Promise} A resolved promise.\n   */\n  identifyAnonymousUser = jest.fn(() => {\n    this.hasIdentifyBeenCalled = true;\n    return Promise.resolve();\n  });\n\n  /**\n   * Logs the event to the console.\n   *\n   * Checks whether identify has been called, logging an error to the logging service if not.\n   */\n  sendTrackEvent = jest.fn(() => {\n    this.checkIdentifyCalled();\n  });\n\n  /**\n   * Logs the event to the console.\n   *\n   * Checks whether identify has been called, logging an error to the logging service if not.\n   */\n  sendPageEvent = jest.fn(() => {\n    this.checkIdentifyCalled();\n  });\n}\n\nexport default MockAnalyticsService;\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,oBAAoB,CAAC;EAGzBC,WAAWA,CAAAC,IAAA,EAAiC;IAAA,IAAhC;MAAEC,UAAU;MAAEC;IAAe,CAAC,GAAAF,IAAA;IAAAG,eAAA,8BAKpBC,IAAI,CAACC,EAAE,CAAC,MAAM;MAClC,IAAI,CAAC,IAAI,CAACC,qBAAqB,EAAE;QAC/B,IAAI,CAACJ,cAAc,CAACK,QAAQ,CAAC,uDAAuD,CAAC;MACvF;IACF,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;IAJEJ,eAAA,+BAKuBC,IAAI,CAACC,EAAE,CAAC,MAAMG,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC;IAEvD;AACF;AACA;AACA;AACA;AACA;IALEN,eAAA,oCAM4BC,IAAI,CAACC,EAAE,CAAEK,MAAM,IAAK;MAC9C,IAAI,CAACA,MAAM,EAAE;QACX,MAAM,IAAIC,KAAK,CAAC,mDAAmD,CAAC;MACtE;MACA,IAAI,CAACL,qBAAqB,GAAG,IAAI;IACnC,CAAC,CAAC;IAEF;AACF;AACA;AACA;IAHEH,eAAA,gCAIwBC,IAAI,CAACC,EAAE,CAAC,MAAM;MACpC,IAAI,CAACC,qBAAqB,GAAG,IAAI;MACjC,OAAOE,OAAO,CAACC,OAAO,CAAC,CAAC;IAC1B,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;IAJEN,eAAA,yBAKiBC,IAAI,CAACC,EAAE,CAAC,MAAM;MAC7B,IAAI,CAACO,mBAAmB,CAAC,CAAC;IAC5B,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;IAJET,eAAA,wBAKgBC,IAAI,CAACC,EAAE,CAAC,MAAM;MAC5B,IAAI,CAACO,mBAAmB,CAAC,CAAC;IAC5B,CAAC,CAAC;IAvDA,IAAI,CAACV,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACD,UAAU,GAAGA,UAAU;EAC9B;AAsDF;AAACE,eAAA,CA5DKL,oBAAoB,2BACO,KAAK;AA6DtC,eAAeA,oBAAoB","ignoreList":[]}