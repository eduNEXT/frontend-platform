{"version":3,"file":"createRetryInterceptor.js","names":["axios","defaultGetBackoffMilliseconds","nthRetry","maximumBackoffMilliseconds","arguments","length","undefined","exponentialBackoffSeconds","randomFractionOfASecond","Math","random","backoffSeconds","backoffMilliseconds","round","min","createRetryInterceptor","options","httpClient","create","getBackoffMilliseconds","shouldRetry","error","isRequestError","response","config","defaultMaxRetries","interceptor","Promise","reject","maxRetries","retryRequest","retryResponse","backoffDelay","resolve","setTimeout","request","e"],"sources":["../../../src/auth/interceptors/createRetryInterceptor.js"],"sourcesContent":["import axios from 'axios';\n\n// This default algorithm is a recreation of what is documented here\n// https://cloud.google.com/storage/docs/exponential-backoff\nconst defaultGetBackoffMilliseconds = (nthRetry, maximumBackoffMilliseconds = 16000) => {\n  // Retry at exponential intervals (2, 4, 8, 16...)\n  const exponentialBackoffSeconds = 2 ** nthRetry;\n  // Add some randomness to avoid sending retries from separate requests all at once\n  const randomFractionOfASecond = Math.random();\n  const backoffSeconds = exponentialBackoffSeconds + randomFractionOfASecond;\n  const backoffMilliseconds = Math.round(backoffSeconds * 1000);\n  return Math.min(backoffMilliseconds, maximumBackoffMilliseconds);\n};\n\nconst createRetryInterceptor = (options = {}) => {\n  const {\n    httpClient = axios.create(),\n    getBackoffMilliseconds = defaultGetBackoffMilliseconds,\n    // By default only retry outbound request failures (not responses)\n    shouldRetry = (error) => {\n      const isRequestError = !error.response && error.config;\n      return isRequestError;\n    },\n    // A per-request maxRetries can be specified in request config.\n    defaultMaxRetries = 2,\n  } = options;\n\n  const interceptor = async (error) => {\n    const { config } = error;\n\n    // If no config exists there was some other error setting up the request\n    if (!config) {\n      return Promise.reject(error);\n    }\n\n    if (!shouldRetry(error)) {\n      return Promise.reject(error);\n    }\n\n    const {\n      maxRetries = defaultMaxRetries,\n    } = config;\n\n    const retryRequest = async (nthRetry) => {\n      if (nthRetry > maxRetries) {\n        // Reject with the original error\n        return Promise.reject(error);\n      }\n\n      let retryResponse;\n\n      try {\n        const backoffDelay = getBackoffMilliseconds(nthRetry);\n        // Delay (wrapped in a promise so we can await the setTimeout)\n        await new Promise(resolve => { setTimeout(resolve, backoffDelay); });\n        // Make retry request\n        retryResponse = await httpClient.request(config);\n      } catch (e) {\n        return retryRequest(nthRetry + 1);\n      }\n\n      return retryResponse;\n    };\n\n    return retryRequest(1);\n  };\n\n  return interceptor;\n};\n\nexport default createRetryInterceptor;\nexport { defaultGetBackoffMilliseconds };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA,MAAMC,6BAA6B,GAAG,SAAAA,CAACC,QAAQ,EAAyC;EAAA,IAAvCC,0BAA0B,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EACjF;EACA,MAAMG,yBAAyB,GAAG,CAAC,IAAIL,QAAQ;EAC/C;EACA,MAAMM,uBAAuB,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC;EAC7C,MAAMC,cAAc,GAAGJ,yBAAyB,GAAGC,uBAAuB;EAC1E,MAAMI,mBAAmB,GAAGH,IAAI,CAACI,KAAK,CAACF,cAAc,GAAG,IAAI,CAAC;EAC7D,OAAOF,IAAI,CAACK,GAAG,CAACF,mBAAmB,EAAET,0BAA0B,CAAC;AAClE,CAAC;AAED,MAAMY,sBAAsB,GAAG,SAAAA,CAAA,EAAkB;EAAA,IAAjBC,OAAO,GAAAZ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAC1C,MAAM;IACJa,UAAU,GAAGjB,KAAK,CAACkB,MAAM,CAAC,CAAC;IAC3BC,sBAAsB,GAAGlB,6BAA6B;IACtD;IACAmB,WAAW,GAAIC,KAAK,IAAK;MACvB,MAAMC,cAAc,GAAG,CAACD,KAAK,CAACE,QAAQ,IAAIF,KAAK,CAACG,MAAM;MACtD,OAAOF,cAAc;IACvB,CAAC;IACD;IACAG,iBAAiB,GAAG;EACtB,CAAC,GAAGT,OAAO;EAEX,MAAMU,WAAW,GAAG,MAAOL,KAAK,IAAK;IACnC,MAAM;MAAEG;IAAO,CAAC,GAAGH,KAAK;;IAExB;IACA,IAAI,CAACG,MAAM,EAAE;MACX,OAAOG,OAAO,CAACC,MAAM,CAACP,KAAK,CAAC;IAC9B;IAEA,IAAI,CAACD,WAAW,CAACC,KAAK,CAAC,EAAE;MACvB,OAAOM,OAAO,CAACC,MAAM,CAACP,KAAK,CAAC;IAC9B;IAEA,MAAM;MACJQ,UAAU,GAAGJ;IACf,CAAC,GAAGD,MAAM;IAEV,MAAMM,YAAY,GAAG,MAAO5B,QAAQ,IAAK;MACvC,IAAIA,QAAQ,GAAG2B,UAAU,EAAE;QACzB;QACA,OAAOF,OAAO,CAACC,MAAM,CAACP,KAAK,CAAC;MAC9B;MAEA,IAAIU,aAAa;MAEjB,IAAI;QACF,MAAMC,YAAY,GAAGb,sBAAsB,CAACjB,QAAQ,CAAC;QACrD;QACA,MAAM,IAAIyB,OAAO,CAACM,OAAO,IAAI;UAAEC,UAAU,CAACD,OAAO,EAAED,YAAY,CAAC;QAAE,CAAC,CAAC;QACpE;QACAD,aAAa,GAAG,MAAMd,UAAU,CAACkB,OAAO,CAACX,MAAM,CAAC;MAClD,CAAC,CAAC,OAAOY,CAAC,EAAE;QACV,OAAON,YAAY,CAAC5B,QAAQ,GAAG,CAAC,CAAC;MACnC;MAEA,OAAO6B,aAAa;IACtB,CAAC;IAED,OAAOD,YAAY,CAAC,CAAC,CAAC;EACxB,CAAC;EAED,OAAOJ,WAAW;AACpB,CAAC;AAED,eAAeX,sBAAsB;AACrC,SAASd,6BAA6B","ignoreList":[]}