{"version":3,"file":"AxiosJwtAuthService.js","names":["axios","PropTypes","logFrontendAuthError","camelCaseObject","ensureDefinedConfig","createJwtTokenProviderInterceptor","createCsrfTokenProviderInterceptor","createProcessAxiosRequestErrorInterceptor","AxiosJwtTokenService","AxiosCsrfTokenService","configureCache","optionsPropTypes","config","shape","BASE_URL","string","isRequired","LMS_BASE_URL","LOGIN_URL","LOGOUT_URL","REFRESH_ACCESS_TOKEN_ENDPOINT","ACCESS_TOKEN_COOKIE_NAME","CSRF_TOKEN_API_PATH","loggingService","logError","func","logInfo","AxiosJwtAuthService","constructor","options","authenticatedHttpClient","httpClient","cachedAuthenticatedHttpClient","cachedHttpClient","authenticatedUser","checkPropTypes","jwtTokenService","csrfTokenService","addAuthenticationToHttpClient","create","then","cachedAxiosClient","catch","e","message","finally","middleware","applyMiddleware","arguments","length","undefined","clients","forEach","middlewareFn","client","error","getAuthenticatedHttpClient","useCache","getHttpClient","getJwtTokenService","getCsrfTokenService","getLoginRedirectUrl","redirectUrl","encodeURIComponent","redirectToLogin","global","location","assign","getLogoutRedirectUrl","redirectToLogout","getAuthenticatedUser","setAuthenticatedUser","authUser","fetchAuthenticatedUser","decodedAccessToken","getJwtToken","forceRefresh","email","userId","user_id","username","preferred_username","roles","administrator","name","setCustomAttribute","ensureAuthenticatedUser","isRedirectFromLoginPage","document","referrer","startsWith","redirectLoopError","Error","unauthorizedError","isRedirecting","hydrateAuthenticatedUser","user","response","get","_objectSpread","data","newHttpClient","Object","defaults","withCredentials","refreshAccessTokenInterceptor","shouldSkip","axiosRequestConfig","isPublic","attachCsrfTokenInterceptor","method","isCsrfExempt","CSRF_PROTECTED_METHODS","includes","processAxiosRequestErrorInterceptor","interceptors","request","use"],"sources":["../../src/auth/AxiosJwtAuthService.js"],"sourcesContent":["import axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { logFrontendAuthError } from './utils';\nimport { camelCaseObject, ensureDefinedConfig } from '../utils';\nimport createJwtTokenProviderInterceptor from './interceptors/createJwtTokenProviderInterceptor';\nimport createCsrfTokenProviderInterceptor from './interceptors/createCsrfTokenProviderInterceptor';\nimport createProcessAxiosRequestErrorInterceptor from './interceptors/createProcessAxiosRequestErrorInterceptor';\nimport AxiosJwtTokenService from './AxiosJwtTokenService';\nimport AxiosCsrfTokenService from './AxiosCsrfTokenService';\nimport configureCache from './LocalForageCache';\n\nconst optionsPropTypes = {\n  config: PropTypes.shape({\n    BASE_URL: PropTypes.string.isRequired,\n    LMS_BASE_URL: PropTypes.string.isRequired,\n    LOGIN_URL: PropTypes.string.isRequired,\n    LOGOUT_URL: PropTypes.string.isRequired,\n    REFRESH_ACCESS_TOKEN_ENDPOINT: PropTypes.string.isRequired,\n    ACCESS_TOKEN_COOKIE_NAME: PropTypes.string.isRequired,\n    CSRF_TOKEN_API_PATH: PropTypes.string.isRequired,\n  }).isRequired,\n  loggingService: PropTypes.shape({\n    logError: PropTypes.func.isRequired,\n    logInfo: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\n/**\n * @implements {AuthService}\n * @memberof module:Auth\n */\nclass AxiosJwtAuthService {\n  /**\n   * @param {Object} options\n   * @param {Object} options.config\n   * @param {string} options.config.BASE_URL\n   * @param {string} options.config.LMS_BASE_URL\n   * @param {string} options.config.LOGIN_URL\n   * @param {string} options.config.LOGOUT_URL\n   * @param {string} options.config.REFRESH_ACCESS_TOKEN_ENDPOINT\n   * @param {string} options.config.ACCESS_TOKEN_COOKIE_NAME\n   * @param {string} options.config.CSRF_TOKEN_API_PATH\n   * @param {Object} options.loggingService requires logError and logInfo methods\n   */\n  constructor(options) {\n    this.authenticatedHttpClient = null;\n    this.httpClient = null;\n    this.cachedAuthenticatedHttpClient = null;\n    this.cachedHttpClient = null;\n    this.authenticatedUser = null;\n\n    ensureDefinedConfig(options, 'AuthService');\n    PropTypes.checkPropTypes(optionsPropTypes, options, 'options', 'AuthService');\n\n    this.config = options.config;\n    this.loggingService = options.loggingService;\n    this.jwtTokenService = new AxiosJwtTokenService(\n      this.loggingService,\n      this.config.ACCESS_TOKEN_COOKIE_NAME,\n      this.config.REFRESH_ACCESS_TOKEN_ENDPOINT,\n    );\n    this.csrfTokenService = new AxiosCsrfTokenService(this.config.CSRF_TOKEN_API_PATH);\n    this.authenticatedHttpClient = this.addAuthenticationToHttpClient(axios.create());\n    this.httpClient = axios.create();\n    configureCache()\n      .then((cachedAxiosClient) => {\n        this.cachedAuthenticatedHttpClient = this.addAuthenticationToHttpClient(cachedAxiosClient);\n        this.cachedHttpClient = cachedAxiosClient;\n      })\n      .catch((e) => {\n        // fallback to non-cached HTTP clients and log error\n        this.cachedAuthenticatedHttpClient = this.authenticatedHttpClient;\n        this.cachedHttpClient = this.httpClient;\n        logFrontendAuthError(this.loggingService, `configureCache failed with error: ${e.message}`);\n      }).finally(() => {\n        this.middleware = options.middleware;\n        this.applyMiddleware(options.middleware);\n      });\n  }\n\n  /**\n   * Applies middleware to the axios instances in this service.\n   *\n   * @param {Array} middleware Middleware to apply.\n   */\n  applyMiddleware(middleware = []) {\n    const clients = [\n      this.authenticatedHttpClient, this.httpClient,\n      this.cachedAuthenticatedHttpClient, this.cachedHttpClient,\n    ];\n    try {\n      (middleware).forEach((middlewareFn) => {\n        clients.forEach((client) => client && middlewareFn(client));\n      });\n    } catch (error) {\n      logFrontendAuthError(this.loggingService, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Gets the authenticated HTTP client for the service.  This is an axios instance.\n   *\n   * @param {Object} [options] Optional options for how the HTTP client should be configured.\n   * @param {boolean} [options.useCache] Whether to use front end caching for all requests made\n   * with the returned client.\n   *\n   * @returns {HttpClient} A configured axios http client which can be used for authenticated\n   * requests.\n   */\n  getAuthenticatedHttpClient(options = {}) {\n    if (options.useCache) {\n      return this.cachedAuthenticatedHttpClient;\n    }\n\n    return this.authenticatedHttpClient;\n  }\n\n  /**\n   * Gets the unauthenticated HTTP client for the service.  This is an axios instance.\n   *\n   * @param {Object} [options] Optional options for how the HTTP client should be configured.\n   * @param {boolean} [options.useCache] Whether to use front end caching for all requests made\n   * with the returned client.\n   * @returns {HttpClient} A configured axios http client.\n   */\n  getHttpClient(options = {}) {\n    if (options.useCache) {\n      return this.cachedHttpClient;\n    }\n\n    return this.httpClient;\n  }\n\n  /**\n   * Used primarily for testing.\n   *\n   * @ignore\n   */\n  getJwtTokenService() {\n    return this.jwtTokenService;\n  }\n\n  /**\n   * Used primarily for testing.\n   *\n   * @ignore\n   */\n  getCsrfTokenService() {\n    return this.csrfTokenService;\n  }\n\n  /**\n   * Builds a URL to the login page with a post-login redirect URL attached as a query parameter.\n   *\n   * ```\n   * const url = getLoginRedirectUrl('http://localhost/mypage');\n   * console.log(url); // http://localhost/login?next=http%3A%2F%2Flocalhost%2Fmypage\n   * ```\n   *\n   * @param {string} redirectUrl The URL the user should be redirected to after logging in.\n   */\n  getLoginRedirectUrl(redirectUrl = this.config.BASE_URL) {\n    return `${this.config.LOGIN_URL}?next=${encodeURIComponent(redirectUrl)}`;\n  }\n\n  /**\n   * Redirects the user to the login page.\n   *\n   * @param {string} redirectUrl The URL the user should be redirected to after logging in.\n   */\n  redirectToLogin(redirectUrl = this.config.BASE_URL) {\n    global.location.assign(this.getLoginRedirectUrl(redirectUrl));\n  }\n\n  /**\n   * Builds a URL to the logout page with a post-logout redirect URL attached as a query parameter.\n   *\n   * ```\n   * const url = getLogoutRedirectUrl('http://localhost/mypage');\n   * console.log(url); // http://localhost/logout?next=http%3A%2F%2Flocalhost%2Fmypage\n   * ```\n   *\n   * @param {string} redirectUrl The URL the user should be redirected to after logging out.\n   */\n  getLogoutRedirectUrl(redirectUrl = this.config.BASE_URL) {\n    return `${this.config.LOGOUT_URL}?redirect_url=${encodeURIComponent(redirectUrl)}`;\n  }\n\n  /**\n   * Redirects the user to the logout page.\n   *\n   * @param {string} redirectUrl The URL the user should be redirected to after logging out.\n   */\n  redirectToLogout(redirectUrl = this.config.BASE_URL) {\n    global.location.assign(this.getLogoutRedirectUrl(redirectUrl));\n  }\n\n  /**\n   * If it exists, returns the user data representing the currently authenticated user. If the\n   * user is anonymous, returns null.\n   *\n   * @returns {UserData|null}\n   */\n  getAuthenticatedUser() {\n    return this.authenticatedUser;\n  }\n\n  /**\n   * Sets the authenticated user to the provided value.\n   *\n   * @param {UserData} authUser\n   */\n  setAuthenticatedUser(authUser) {\n    this.authenticatedUser = authUser;\n  }\n\n  /**\n   * Reads the authenticated user's access token. Resolves to null if the user is\n   * unauthenticated.\n   *\n   * @returns {Promise<UserData>|Promise<null>} Resolves to the user's access token if they are\n   * logged in.\n   */\n  async fetchAuthenticatedUser(options = {}) {\n    const decodedAccessToken = await this.jwtTokenService.getJwtToken(options.forceRefresh || false);\n\n    if (decodedAccessToken !== null) {\n      this.setAuthenticatedUser({\n        email: decodedAccessToken.email,\n        userId: decodedAccessToken.user_id,\n        username: decodedAccessToken.preferred_username,\n        roles: decodedAccessToken.roles || [],\n        administrator: decodedAccessToken.administrator,\n        name: decodedAccessToken.name,\n      });\n      // Sets userId as a custom attribute that will be included with all subsequent log messages.\n      // Very helpful for debugging.\n      this.loggingService.setCustomAttribute('userId', decodedAccessToken.user_id);\n    } else {\n      this.setAuthenticatedUser(null);\n      // Intentionally not setting `userId` in the logging service here because it would be useful\n      // to know the previously logged in user for debugging refresh issues.\n    }\n\n    return this.getAuthenticatedUser();\n  }\n\n  /**\n   * Ensures a user is authenticated. It will redirect to login when not\n   * authenticated.\n   *\n   * @param {string} [redirectUrl=config.BASE_URL] to return user after login when not\n   * authenticated.\n   * @returns {Promise<UserData>}\n   */\n  async ensureAuthenticatedUser(redirectUrl = this.config.BASE_URL) {\n    await this.fetchAuthenticatedUser();\n\n    if (this.getAuthenticatedUser() === null) {\n      const isRedirectFromLoginPage = global.document.referrer\n        && global.document.referrer.startsWith(this.config.LOGIN_URL);\n\n      if (isRedirectFromLoginPage) {\n        const redirectLoopError = new Error('Redirect from login page. Rejecting to avoid infinite redirect loop.');\n        logFrontendAuthError(this.loggingService, redirectLoopError);\n        throw redirectLoopError;\n      }\n\n      // The user is not authenticated, send them to the login page.\n      this.redirectToLogin(redirectUrl);\n\n      const unauthorizedError = new Error('Failed to ensure the user is authenticated');\n      unauthorizedError.isRedirecting = true;\n      throw unauthorizedError;\n    }\n\n    return this.getAuthenticatedUser();\n  }\n\n  /**\n   * Fetches additional user account information for the authenticated user and merges it into the\n   * existing authenticatedUser object, available via getAuthenticatedUser().\n   *\n   * ```\n   *  console.log(authenticatedUser); // Will be sparse and only contain basic information.\n   *  await hydrateAuthenticatedUser()\n   *  const authenticatedUser = getAuthenticatedUser();\n   *  console.log(authenticatedUser); // Will contain additional user information\n   * ```\n   *\n   * @returns {Promise<null>}\n   */\n  async hydrateAuthenticatedUser() {\n    const user = this.getAuthenticatedUser();\n    if (user !== null) {\n      const response = await this.authenticatedHttpClient\n        .get(`${this.config.LMS_BASE_URL}/api/user/v1/accounts/${user.username}`);\n      this.setAuthenticatedUser({ ...user, ...camelCaseObject(response.data) });\n    }\n  }\n\n  /**\n * Adds authentication defaults and interceptors to an HTTP client instance.\n *\n * @param {HttpClient} newHttpClient\n * @param {Object} config\n * @param {string} [config.REFRESH_ACCESS_TOKEN_ENDPOINT]\n * @param {string} [config.ACCESS_TOKEN_COOKIE_NAME]\n * @param {string} [config.CSRF_TOKEN_API_PATH]\n * @returns {HttpClient} A configured Axios HTTP client.\n */\n  addAuthenticationToHttpClient(newHttpClient) {\n    const httpClient = Object.create(newHttpClient);\n    // Set withCredentials to true. Enables cross-site Access-Control requests\n    // to be made using cookies, authorization headers or TLS client\n    // certificates. More on MDN:\n    // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials\n    httpClient.defaults.withCredentials = true;\n\n    // Axios interceptors\n\n    // The JWT access token interceptor attempts to refresh the user's jwt token\n    // before any request unless the isPublic flag is set on the request config.\n    const refreshAccessTokenInterceptor = createJwtTokenProviderInterceptor({\n      jwtTokenService: this.jwtTokenService,\n      shouldSkip: axiosRequestConfig => axiosRequestConfig.isPublic,\n    });\n    // The CSRF token intercepter fetches and caches a csrf token for any post,\n    // put, patch, or delete request. That token is then added to the request\n    // headers.\n    const attachCsrfTokenInterceptor = createCsrfTokenProviderInterceptor({\n      csrfTokenService: this.csrfTokenService,\n      CSRF_TOKEN_API_PATH: this.config.CSRF_TOKEN_API_PATH,\n      shouldSkip: (axiosRequestConfig) => {\n        const { method, isCsrfExempt } = axiosRequestConfig;\n        const CSRF_PROTECTED_METHODS = ['post', 'put', 'patch', 'delete'];\n        return isCsrfExempt || !CSRF_PROTECTED_METHODS.includes(method);\n      },\n    });\n\n    const processAxiosRequestErrorInterceptor = createProcessAxiosRequestErrorInterceptor({\n      loggingService: this.loggingService,\n    });\n\n    // Request interceptors: Axios runs the interceptors in reverse order from\n    // how they are listed. After fetching csrf tokens no longer require jwt\n    // authentication, it won't matter which happens first. This change is\n    // coming soon in edx-platform. Nov. 2019\n    httpClient.interceptors.request.use(attachCsrfTokenInterceptor);\n    httpClient.interceptors.request.use(refreshAccessTokenInterceptor);\n\n    // Response interceptor: moves axios response error data into the error\n    // object at error.customAttributes\n    httpClient.interceptors.response.use(\n      response => response,\n      processAxiosRequestErrorInterceptor,\n    );\n\n    return httpClient;\n  }\n}\n\nexport default AxiosJwtAuthService;\n"],"mappings":";;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,oBAAoB,QAAQ,SAAS;AAC9C,SAASC,eAAe,EAAEC,mBAAmB,QAAQ,UAAU;AAC/D,OAAOC,iCAAiC,MAAM,kDAAkD;AAChG,OAAOC,kCAAkC,MAAM,mDAAmD;AAClG,OAAOC,yCAAyC,MAAM,0DAA0D;AAChH,OAAOC,oBAAoB,MAAM,wBAAwB;AACzD,OAAOC,qBAAqB,MAAM,yBAAyB;AAC3D,OAAOC,cAAc,MAAM,oBAAoB;AAE/C,MAAMC,gBAAgB,GAAG;EACvBC,MAAM,EAAEX,SAAS,CAACY,KAAK,CAAC;IACtBC,QAAQ,EAAEb,SAAS,CAACc,MAAM,CAACC,UAAU;IACrCC,YAAY,EAAEhB,SAAS,CAACc,MAAM,CAACC,UAAU;IACzCE,SAAS,EAAEjB,SAAS,CAACc,MAAM,CAACC,UAAU;IACtCG,UAAU,EAAElB,SAAS,CAACc,MAAM,CAACC,UAAU;IACvCI,6BAA6B,EAAEnB,SAAS,CAACc,MAAM,CAACC,UAAU;IAC1DK,wBAAwB,EAAEpB,SAAS,CAACc,MAAM,CAACC,UAAU;IACrDM,mBAAmB,EAAErB,SAAS,CAACc,MAAM,CAACC;EACxC,CAAC,CAAC,CAACA,UAAU;EACbO,cAAc,EAAEtB,SAAS,CAACY,KAAK,CAAC;IAC9BW,QAAQ,EAAEvB,SAAS,CAACwB,IAAI,CAACT,UAAU;IACnCU,OAAO,EAAEzB,SAAS,CAACwB,IAAI,CAACT;EAC1B,CAAC,CAAC,CAACA;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMW,mBAAmB,CAAC;EACxB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAWA,CAACC,OAAO,EAAE;IACnB,IAAI,CAACC,uBAAuB,GAAG,IAAI;IACnC,IAAI,CAACC,UAAU,GAAG,IAAI;IACtB,IAAI,CAACC,6BAA6B,GAAG,IAAI;IACzC,IAAI,CAACC,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACC,iBAAiB,GAAG,IAAI;IAE7B9B,mBAAmB,CAACyB,OAAO,EAAE,aAAa,CAAC;IAC3C5B,SAAS,CAACkC,cAAc,CAACxB,gBAAgB,EAAEkB,OAAO,EAAE,SAAS,EAAE,aAAa,CAAC;IAE7E,IAAI,CAACjB,MAAM,GAAGiB,OAAO,CAACjB,MAAM;IAC5B,IAAI,CAACW,cAAc,GAAGM,OAAO,CAACN,cAAc;IAC5C,IAAI,CAACa,eAAe,GAAG,IAAI5B,oBAAoB,CAC7C,IAAI,CAACe,cAAc,EACnB,IAAI,CAACX,MAAM,CAACS,wBAAwB,EACpC,IAAI,CAACT,MAAM,CAACQ,6BACd,CAAC;IACD,IAAI,CAACiB,gBAAgB,GAAG,IAAI5B,qBAAqB,CAAC,IAAI,CAACG,MAAM,CAACU,mBAAmB,CAAC;IAClF,IAAI,CAACQ,uBAAuB,GAAG,IAAI,CAACQ,6BAA6B,CAACtC,KAAK,CAACuC,MAAM,CAAC,CAAC,CAAC;IACjF,IAAI,CAACR,UAAU,GAAG/B,KAAK,CAACuC,MAAM,CAAC,CAAC;IAChC7B,cAAc,CAAC,CAAC,CACb8B,IAAI,CAAEC,iBAAiB,IAAK;MAC3B,IAAI,CAACT,6BAA6B,GAAG,IAAI,CAACM,6BAA6B,CAACG,iBAAiB,CAAC;MAC1F,IAAI,CAACR,gBAAgB,GAAGQ,iBAAiB;IAC3C,CAAC,CAAC,CACDC,KAAK,CAAEC,CAAC,IAAK;MACZ;MACA,IAAI,CAACX,6BAA6B,GAAG,IAAI,CAACF,uBAAuB;MACjE,IAAI,CAACG,gBAAgB,GAAG,IAAI,CAACF,UAAU;MACvC7B,oBAAoB,CAAC,IAAI,CAACqB,cAAc,EAAE,qCAAqCoB,CAAC,CAACC,OAAO,EAAE,CAAC;IAC7F,CAAC,CAAC,CAACC,OAAO,CAAC,MAAM;MACf,IAAI,CAACC,UAAU,GAAGjB,OAAO,CAACiB,UAAU;MACpC,IAAI,CAACC,eAAe,CAAClB,OAAO,CAACiB,UAAU,CAAC;IAC1C,CAAC,CAAC;EACN;;EAEA;AACF;AACA;AACA;AACA;EACEC,eAAeA,CAAA,EAAkB;IAAA,IAAjBD,UAAU,GAAAE,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IAC7B,MAAMG,OAAO,GAAG,CACd,IAAI,CAACrB,uBAAuB,EAAE,IAAI,CAACC,UAAU,EAC7C,IAAI,CAACC,6BAA6B,EAAE,IAAI,CAACC,gBAAgB,CAC1D;IACD,IAAI;MACDa,UAAU,CAAEM,OAAO,CAAEC,YAAY,IAAK;QACrCF,OAAO,CAACC,OAAO,CAAEE,MAAM,IAAKA,MAAM,IAAID,YAAY,CAACC,MAAM,CAAC,CAAC;MAC7D,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdrD,oBAAoB,CAAC,IAAI,CAACqB,cAAc,EAAEgC,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,0BAA0BA,CAAA,EAAe;IAAA,IAAd3B,OAAO,GAAAmB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACrC,IAAInB,OAAO,CAAC4B,QAAQ,EAAE;MACpB,OAAO,IAAI,CAACzB,6BAA6B;IAC3C;IAEA,OAAO,IAAI,CAACF,uBAAuB;EACrC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE4B,aAAaA,CAAA,EAAe;IAAA,IAAd7B,OAAO,GAAAmB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACxB,IAAInB,OAAO,CAAC4B,QAAQ,EAAE;MACpB,OAAO,IAAI,CAACxB,gBAAgB;IAC9B;IAEA,OAAO,IAAI,CAACF,UAAU;EACxB;;EAEA;AACF;AACA;AACA;AACA;EACE4B,kBAAkBA,CAAA,EAAG;IACnB,OAAO,IAAI,CAACvB,eAAe;EAC7B;;EAEA;AACF;AACA;AACA;AACA;EACEwB,mBAAmBA,CAAA,EAAG;IACpB,OAAO,IAAI,CAACvB,gBAAgB;EAC9B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEwB,mBAAmBA,CAAA,EAAqC;IAAA,IAApCC,WAAW,GAAAd,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI,CAACpC,MAAM,CAACE,QAAQ;IACpD,OAAO,GAAG,IAAI,CAACF,MAAM,CAACM,SAAS,SAAS6C,kBAAkB,CAACD,WAAW,CAAC,EAAE;EAC3E;;EAEA;AACF;AACA;AACA;AACA;EACEE,eAAeA,CAAA,EAAqC;IAAA,IAApCF,WAAW,GAAAd,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI,CAACpC,MAAM,CAACE,QAAQ;IAChDmD,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,IAAI,CAACN,mBAAmB,CAACC,WAAW,CAAC,CAAC;EAC/D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,oBAAoBA,CAAA,EAAqC;IAAA,IAApCN,WAAW,GAAAd,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI,CAACpC,MAAM,CAACE,QAAQ;IACrD,OAAO,GAAG,IAAI,CAACF,MAAM,CAACO,UAAU,iBAAiB4C,kBAAkB,CAACD,WAAW,CAAC,EAAE;EACpF;;EAEA;AACF;AACA;AACA;AACA;EACEO,gBAAgBA,CAAA,EAAqC;IAAA,IAApCP,WAAW,GAAAd,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI,CAACpC,MAAM,CAACE,QAAQ;IACjDmD,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,IAAI,CAACC,oBAAoB,CAACN,WAAW,CAAC,CAAC;EAChE;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEQ,oBAAoBA,CAAA,EAAG;IACrB,OAAO,IAAI,CAACpC,iBAAiB;EAC/B;;EAEA;AACF;AACA;AACA;AACA;EACEqC,oBAAoBA,CAACC,QAAQ,EAAE;IAC7B,IAAI,CAACtC,iBAAiB,GAAGsC,QAAQ;EACnC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,sBAAsBA,CAAA,EAAe;IAAA,IAAd5C,OAAO,GAAAmB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACvC,MAAM0B,kBAAkB,GAAG,MAAM,IAAI,CAACtC,eAAe,CAACuC,WAAW,CAAC9C,OAAO,CAAC+C,YAAY,IAAI,KAAK,CAAC;IAEhG,IAAIF,kBAAkB,KAAK,IAAI,EAAE;MAC/B,IAAI,CAACH,oBAAoB,CAAC;QACxBM,KAAK,EAAEH,kBAAkB,CAACG,KAAK;QAC/BC,MAAM,EAAEJ,kBAAkB,CAACK,OAAO;QAClCC,QAAQ,EAAEN,kBAAkB,CAACO,kBAAkB;QAC/CC,KAAK,EAAER,kBAAkB,CAACQ,KAAK,IAAI,EAAE;QACrCC,aAAa,EAAET,kBAAkB,CAACS,aAAa;QAC/CC,IAAI,EAAEV,kBAAkB,CAACU;MAC3B,CAAC,CAAC;MACF;MACA;MACA,IAAI,CAAC7D,cAAc,CAAC8D,kBAAkB,CAAC,QAAQ,EAAEX,kBAAkB,CAACK,OAAO,CAAC;IAC9E,CAAC,MAAM;MACL,IAAI,CAACR,oBAAoB,CAAC,IAAI,CAAC;MAC/B;MACA;IACF;IAEA,OAAO,IAAI,CAACD,oBAAoB,CAAC,CAAC;EACpC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMgB,uBAAuBA,CAAA,EAAqC;IAAA,IAApCxB,WAAW,GAAAd,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI,CAACpC,MAAM,CAACE,QAAQ;IAC9D,MAAM,IAAI,CAAC2D,sBAAsB,CAAC,CAAC;IAEnC,IAAI,IAAI,CAACH,oBAAoB,CAAC,CAAC,KAAK,IAAI,EAAE;MACxC,MAAMiB,uBAAuB,GAAGtB,MAAM,CAACuB,QAAQ,CAACC,QAAQ,IACnDxB,MAAM,CAACuB,QAAQ,CAACC,QAAQ,CAACC,UAAU,CAAC,IAAI,CAAC9E,MAAM,CAACM,SAAS,CAAC;MAE/D,IAAIqE,uBAAuB,EAAE;QAC3B,MAAMI,iBAAiB,GAAG,IAAIC,KAAK,CAAC,sEAAsE,CAAC;QAC3G1F,oBAAoB,CAAC,IAAI,CAACqB,cAAc,EAAEoE,iBAAiB,CAAC;QAC5D,MAAMA,iBAAiB;MACzB;;MAEA;MACA,IAAI,CAAC3B,eAAe,CAACF,WAAW,CAAC;MAEjC,MAAM+B,iBAAiB,GAAG,IAAID,KAAK,CAAC,4CAA4C,CAAC;MACjFC,iBAAiB,CAACC,aAAa,GAAG,IAAI;MACtC,MAAMD,iBAAiB;IACzB;IAEA,OAAO,IAAI,CAACvB,oBAAoB,CAAC,CAAC;EACpC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMyB,wBAAwBA,CAAA,EAAG;IAC/B,MAAMC,IAAI,GAAG,IAAI,CAAC1B,oBAAoB,CAAC,CAAC;IACxC,IAAI0B,IAAI,KAAK,IAAI,EAAE;MACjB,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACnE,uBAAuB,CAChDoE,GAAG,CAAC,GAAG,IAAI,CAACtF,MAAM,CAACK,YAAY,yBAAyB+E,IAAI,CAAChB,QAAQ,EAAE,CAAC;MAC3E,IAAI,CAACT,oBAAoB,CAAA4B,aAAA,CAAAA,aAAA,KAAMH,IAAI,GAAK7F,eAAe,CAAC8F,QAAQ,CAACG,IAAI,CAAC,CAAE,CAAC;IAC3E;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE9D,6BAA6BA,CAAC+D,aAAa,EAAE;IAC3C,MAAMtE,UAAU,GAAGuE,MAAM,CAAC/D,MAAM,CAAC8D,aAAa,CAAC;IAC/C;IACA;IACA;IACA;IACAtE,UAAU,CAACwE,QAAQ,CAACC,eAAe,GAAG,IAAI;;IAE1C;;IAEA;IACA;IACA,MAAMC,6BAA6B,GAAGpG,iCAAiC,CAAC;MACtE+B,eAAe,EAAE,IAAI,CAACA,eAAe;MACrCsE,UAAU,EAAEC,kBAAkB,IAAIA,kBAAkB,CAACC;IACvD,CAAC,CAAC;IACF;IACA;IACA;IACA,MAAMC,0BAA0B,GAAGvG,kCAAkC,CAAC;MACpE+B,gBAAgB,EAAE,IAAI,CAACA,gBAAgB;MACvCf,mBAAmB,EAAE,IAAI,CAACV,MAAM,CAACU,mBAAmB;MACpDoF,UAAU,EAAGC,kBAAkB,IAAK;QAClC,MAAM;UAAEG,MAAM;UAAEC;QAAa,CAAC,GAAGJ,kBAAkB;QACnD,MAAMK,sBAAsB,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC;QACjE,OAAOD,YAAY,IAAI,CAACC,sBAAsB,CAACC,QAAQ,CAACH,MAAM,CAAC;MACjE;IACF,CAAC,CAAC;IAEF,MAAMI,mCAAmC,GAAG3G,yCAAyC,CAAC;MACpFgB,cAAc,EAAE,IAAI,CAACA;IACvB,CAAC,CAAC;;IAEF;IACA;IACA;IACA;IACAQ,UAAU,CAACoF,YAAY,CAACC,OAAO,CAACC,GAAG,CAACR,0BAA0B,CAAC;IAC/D9E,UAAU,CAACoF,YAAY,CAACC,OAAO,CAACC,GAAG,CAACZ,6BAA6B,CAAC;;IAElE;IACA;IACA1E,UAAU,CAACoF,YAAY,CAAClB,QAAQ,CAACoB,GAAG,CAClCpB,QAAQ,IAAIA,QAAQ,EACpBiB,mCACF,CAAC;IAED,OAAOnF,UAAU;EACnB;AACF;AAEA,eAAeJ,mBAAmB","ignoreList":[]}