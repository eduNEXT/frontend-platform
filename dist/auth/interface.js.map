{"version":3,"file":"interface.js","names":["PropTypes","publish","AUTHENTICATED_USER_TOPIC","AUTHENTICATED_USER_CHANGED","optionsShape","config","shape","BASE_URL","string","isRequired","LMS_BASE_URL","LOGIN_URL","LOGOUT_URL","REFRESH_ACCESS_TOKEN_ENDPOINT","ACCESS_TOKEN_COOKIE_NAME","CSRF_TOKEN_API_PATH","loggingService","logError","func","logInfo","serviceShape","getAuthenticatedHttpClient","getHttpClient","getLoginRedirectUrl","redirectToLogin","getLogoutRedirectUrl","redirectToLogout","getAuthenticatedUser","setAuthenticatedUser","fetchAuthenticatedUser","ensureAuthenticatedUser","hydrateAuthenticatedUser","service","configure","AuthService","options","checkPropTypes","getAuthService","Error","resetAuthService","arguments","length","undefined","redirectUrl","authUser"],"sources":["../../src/auth/interface.js"],"sourcesContent":["/**\n * #### Import members from **@edx/frontend-platform/auth**\n *\n * Simplifies the process of making authenticated API requests to backend edX services by providing\n * common authN/authZ client code that enables the login/logout flow and handles ensuring the\n * presence of a valid [JWT cookie](https://github.com/openedx/edx-platform/blob/master/openedx/core/djangoapps/oauth_dispatch/docs/decisions/0009-jwt-in-session-cookie.rst).\n *\n * The `initialize` function performs much of the auth configuration for you.  If, however, you're\n * not using the `initialize` function, an authenticated API client can be created via:\n *\n * ```\n * import {\n *   configure,\n *   fetchAuthenticatedUser,\n *   getAuthenticatedHttpClient\n * } from '@edx/frontend-platform/auth';\n * import { getConfig } from '@edx/frontend-platform';\n * import { getLoggingService } from '@edx/frontend-platform/logging';\n *\n * configure({\n *   loggingService: getLoggingService(),\n *   config: getConfig(),\n * });\n *\n * const authenticatedUser = await fetchAuthenticatedUser(); // validates and decodes JWT token\n * const authenticatedHttpClient = getAuthenticatedHttpClient();\n * const response = await getAuthenticatedHttpClient().get(`https://example.com/api/user/data/${authenticatedUser.username}`); // fetching from an authenticated API using user data\n * ```\n *\n * As shown in this example, auth depends on the configuration document and logging.\n *\n * NOTE: The documentation for AxiosJwtAuthService is nearly the same as that for the top-level\n * auth interface, except that it contains some Axios-specific details.\n *\n * @module Auth\n */\nimport PropTypes from 'prop-types';\nimport { publish } from '../pubSub';\n\n/**\n * @constant\n * @private\n */\nexport const AUTHENTICATED_USER_TOPIC = 'AUTHENTICATED_USER';\n\n/**\n * Published when the authenticated user data changes.  This can happen when the authentication\n * service determines that the user is authenticated or anonymous, as well as when we fetch\n * additional user account data if the `hydrateAuthenticatedUser` flag has been set in the\n * `initialize` function.\n *\n * @event\n * @see {@link module:Initialization~initialize}\n */\nexport const AUTHENTICATED_USER_CHANGED = `${AUTHENTICATED_USER_TOPIC}.CHANGED`;\n\nconst optionsShape = {\n  config: PropTypes.shape({\n    BASE_URL: PropTypes.string.isRequired,\n    LMS_BASE_URL: PropTypes.string.isRequired,\n    LOGIN_URL: PropTypes.string.isRequired,\n    LOGOUT_URL: PropTypes.string.isRequired,\n    REFRESH_ACCESS_TOKEN_ENDPOINT: PropTypes.string.isRequired,\n    ACCESS_TOKEN_COOKIE_NAME: PropTypes.string.isRequired,\n    CSRF_TOKEN_API_PATH: PropTypes.string.isRequired,\n  }).isRequired,\n  loggingService: PropTypes.shape({\n    logError: PropTypes.func.isRequired,\n    logInfo: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nconst serviceShape = {\n  getAuthenticatedHttpClient: PropTypes.func.isRequired,\n  getHttpClient: PropTypes.func.isRequired,\n  getLoginRedirectUrl: PropTypes.func.isRequired,\n  redirectToLogin: PropTypes.func.isRequired,\n  getLogoutRedirectUrl: PropTypes.func.isRequired,\n  redirectToLogout: PropTypes.func.isRequired,\n  getAuthenticatedUser: PropTypes.func.isRequired,\n  setAuthenticatedUser: PropTypes.func.isRequired,\n  fetchAuthenticatedUser: PropTypes.func.isRequired,\n  ensureAuthenticatedUser: PropTypes.func.isRequired,\n  hydrateAuthenticatedUser: PropTypes.func.isRequired,\n};\n\nlet service;\n\n/**\n *\n * @param {class} AuthService\n * @param {*} options\n * @returns {AuthService}\n */\nexport function configure(AuthService, options) {\n  PropTypes.checkPropTypes(optionsShape, options, 'property', 'Auth');\n  service = new AuthService(options);\n  PropTypes.checkPropTypes(serviceShape, service, 'property', 'AuthService');\n  return service;\n}\n\n/**\n *\n *\n * @returns {AuthService}\n */\nexport function getAuthService() {\n  if (!service) {\n    throw Error('You must first configure the auth service.');\n  }\n\n  return service;\n}\n\n/**\n *\n */\nexport function resetAuthService() {\n  service = null;\n}\n\n/**\n * Gets the authenticated HTTP client for the service.\n *\n * @param {Object} [options] Optional options for how to configure the authenticated HTTP client\n * @param {boolean} [options.useCache] Whether to use front end caching for all requests made with the returned client\n *\n * @returns {HttpClient}\n */\nexport function getAuthenticatedHttpClient(options = {}) {\n  return service.getAuthenticatedHttpClient(options);\n}\n\n/**\n * Gets the unauthenticated HTTP client for the service.\n *\n * @param {Object} [options] Optional options for how to configure the authenticated HTTP client\n * @param {boolean} [options.useCache] Whether to use front end caching for all requests made with the returned client\n *\n * @returns {HttpClient}\n */\nexport function getHttpClient(options = {}) {\n  return service.getHttpClient(options);\n}\n\n/**\n * Builds a URL to the login page with a post-login redirect URL attached as a query parameter.\n *\n * ```\n * const url = getLoginRedirectUrl('http://localhost/mypage');\n * console.log(url); // http://localhost/login?next=http%3A%2F%2Flocalhost%2Fmypage\n * ```\n *\n * @param {string} redirectUrl The URL the user should be redirected to after logging in.\n */\nexport function getLoginRedirectUrl(redirectUrl) {\n  return service.getLoginRedirectUrl(redirectUrl);\n}\n\n/**\n * Redirects the user to the login page.\n *\n * @param {string} redirectUrl The URL the user should be redirected to after logging in.\n */\nexport function redirectToLogin(redirectUrl) {\n  return service.redirectToLogin(redirectUrl);\n}\n\n/**\n * Builds a URL to the logout page with a post-logout redirect URL attached as a query parameter.\n *\n * ```\n * const url = getLogoutRedirectUrl('http://localhost/mypage');\n * console.log(url); // http://localhost/logout?redirect_url=http%3A%2F%2Flocalhost%2Fmypage\n * ```\n *\n * @param {string} redirectUrl The URL the user should be redirected to after logging out.\n */\nexport function getLogoutRedirectUrl(redirectUrl) {\n  return service.getLogoutRedirectUrl(redirectUrl);\n}\n\n/**\n * Redirects the user to the logout page.\n *\n * @param {string} redirectUrl The URL the user should be redirected to after logging out.\n */\nexport function redirectToLogout(redirectUrl) {\n  return service.redirectToLogout(redirectUrl);\n}\n\n/**\n * If it exists, returns the user data representing the currently authenticated user. If the\n * user is anonymous, returns null.\n *\n * @returns {UserData|null}\n */\nexport function getAuthenticatedUser() {\n  return service.getAuthenticatedUser();\n}\n\n/**\n * Sets the authenticated user to the provided value.\n *\n * @param {UserData} authUser\n * @emits AUTHENTICATED_USER_CHANGED\n */\nexport function setAuthenticatedUser(authUser) {\n  service.setAuthenticatedUser(authUser);\n  publish(AUTHENTICATED_USER_CHANGED);\n}\n\n/**\n * Reads the authenticated user's access token. Resolves to null if the user is\n * unauthenticated.\n *\n * @returns {Promise<UserData>|Promise<null>} Resolves to the user's access token if they are\n * logged in.\n */\nexport async function fetchAuthenticatedUser(options = {}) {\n  return service.fetchAuthenticatedUser(options);\n}\n\n/**\n * Ensures a user is authenticated. It will redirect to login when not\n * authenticated.\n *\n * @param {string} [redirectUrl=config.BASE_URL] to return user after login when not\n * authenticated.\n * @returns {Promise<UserData>}\n */\nexport async function ensureAuthenticatedUser(redirectUrl) {\n  return service.ensureAuthenticatedUser(redirectUrl);\n}\n\n/**\n * Fetches additional user account information for the authenticated user and merges it into the\n * existing authenticatedUser object, available via getAuthenticatedUser().\n *\n * ```\n *  console.log(authenticatedUser); // Will be sparse and only contain basic information.\n *  await hydrateAuthenticatedUser()\n *  const authenticatedUser = getAuthenticatedUser();\n *  console.log(authenticatedUser); // Will contain additional user information\n * ```\n *\n * @emits AUTHENTICATED_USER_CHANGED\n */\nexport async function hydrateAuthenticatedUser() {\n  await service.hydrateAuthenticatedUser();\n  publish(AUTHENTICATED_USER_CHANGED);\n}\n\n/**\n * @name AuthService\n * @interface\n * @memberof module:Auth\n * @property {function} getAuthenticatedHttpClient\n * @property {function} getHttpClient\n * @property {function} getLoginRedirectUrl\n * @property {function} redirectToLogin\n * @property {function} getLogoutRedirectUrl\n * @property {function} redirectToLogout\n * @property {function} getAuthenticatedUser\n * @property {function} setAuthenticatedUser\n * @property {function} fetchAuthenticatedUser\n * @property {function} ensureAuthenticatedUser\n * @property {function} hydrateAuthenticatedUser\n */\n\n/**\n * A configured axios client. See axios docs for more\n * info https://github.com/axios/axios. All the functions\n * below accept isPublic and isCsrfExempt in the request\n * config options. Setting these to true will prevent this\n * client from attempting to refresh the jwt access token\n * or a csrf token respectively.\n *\n * ```\n *  // A public endpoint (no jwt token refresh)\n *  apiClient.get('/path/to/endpoint', { isPublic: true });\n * ```\n *\n * ```\n *  // A csrf exempt endpoint\n *  apiClient.post('/path/to/endpoint', { data }, { isCsrfExempt: true });\n * ```\n *\n * @name HttpClient\n * @interface\n * @memberof module:Auth\n * @property {function} get\n * @property {function} head\n * @property {function} options\n * @property {function} delete (csrf protected)\n * @property {function} post (csrf protected)\n * @property {function} put (csrf protected)\n * @property {function} patch (csrf protected)\n */\n\n/**\n * @name UserData\n * @interface\n * @memberof module:Auth\n * @property {string} userId\n * @property {string} username\n * @property {Array} roles\n * @property {boolean} administrator\n */\n"],"mappings":"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AF,SAAA,MAAG,CAAC,CAAC;EACxC,OAAOR,OAAO,CAACV,aAAa,CAACa,OAAO,CAAC;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASZ,mBAAmBA,CAACoB,WAAW,EAAE;EAC/C,OAAOX,OAAO,CAACT,mBAAmB,CAACoB,WAAW,CAAC;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASnB,eAAeA,CAACmB,WAAW,EAAE;EAC3C,OAAOX,OAAO,CAACR,eAAe,CAACmB,WAAW,CAAC;AAC7C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASlB,oBAAoBA,CAACkB,WAAW,EAAE;EAChD,OAAOX,OAAO,CAACP,oBAAoB,CAACkB,WAAW,CAAC;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASjB,gBAAgBA,CAACiB,WAAW,EAAE;EAC5C,OAAOX,OAAO,CAACN,gBAAgB,CAACiB,WAAW,CAAC;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAShB,oBAAoBA,CAAA,EAAG;EACrC,OAAOK,OAAO,CAACL,oBAAoB,CAAC,CAAC;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoBA,CAACgB,QAAQ,EAAE;EAC7CZ,OAAO,CAACJ,oBAAoB,CAACgB,QAAQ,CAAC;EACtC3C,OAAO,CAACE,0BAA0B,CAAC;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAe0B,sBAAsBA,CAAA,EAAe;EAAA,IAAdM,OAAO,GAAAK,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EACvD,OAAOR,OAAO,CAACH,sBAAsB,CAACM,OAAO,CAAC;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeL,uBAAuBA,CAACa,WAAW,EAAE;EACzD,OAAOX,OAAO,CAACF,uBAAuB,CAACa,WAAW,CAAC;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeZ,wBAAwBA,CAAA,EAAG;EAC/C,MAAMC,OAAO,CAACD,wBAAwB,CAAC,CAAC;EACxC9B,OAAO,CAACE,0BAA0B,CAAC;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]}