{"version":3,"file":"useParagonTheme.js","names":["useCallback","useEffect","useReducer","useState","SELECTED_THEME_VARIANT_KEY","logError","paragonThemeActions","paragonThemeReducer","isEmptyObject","useParagonThemeCore","useParagonThemeUrls","useParagonThemeVariants","getDefaultThemeVariant","_ref","_window$matchMedia","_window","themeVariants","_ref$themeVariantDefa","themeVariantDefaults","undefined","themeVariantKeys","Object","keys","length","themeVariantKey","name","metadata","persistedSelectedParagonThemeVariant","localStorage","getItem","hasDarkSystemPreference","window","matchMedia","call","matches","defaultDarkThemeVariant","dark","darkThemeVariantMetadata","defaultLightThemeVariant","light","lightThemeVariantMetadata","useParagonTheme","_getDefaultThemeVaria","paragonThemeUrls","_ref2","themeCore","core","defaults","variants","initialParagonThemeState","isThemeLoaded","themeVariant","_useReducer","_useReducer2","_slicedToArray","themeState","dispatch","_useState","_useState2","isCoreThemeLoaded","setIsCoreThemeLoaded","onLoadThemeCore","_useState3","_useState4","hasLoadedThemeVariants","setHasLoadedThemeVariants","onLoadThemeVariants","onComplete","handleDarkModeSystemPreferenceChange","prefersDarkMode","setParagonThemeVariant","concat","currentThemeVariant","onDarkModeSystemPreferenceChange","hasThemeConfig","urls","setParagonThemeLoaded"],"sources":["../../../../src/react/hooks/paragon/useParagonTheme.js"],"sourcesContent":["import {\n  useCallback, useEffect, useReducer, useState,\n} from 'react';\n\nimport { SELECTED_THEME_VARIANT_KEY } from '../../constants';\nimport { logError } from '../../../logging';\nimport { paragonThemeActions, paragonThemeReducer } from '../../reducers';\nimport { isEmptyObject } from './utils';\n\nimport useParagonThemeCore from './useParagonThemeCore';\nimport useParagonThemeUrls from './useParagonThemeUrls';\nimport useParagonThemeVariants from './useParagonThemeVariants';\n\n/**\n* Finds the default theme variant from the given theme variants object. If no default theme exists, the light theme\n* variant is returned as a fallback.\n*\n* It prioritizes:\n*   1. A persisted theme variant from localStorage.\n*   2. A system preference (`prefers-color-scheme`).\n*   3. The configured default theme variant.\n*\n* @param {Object.<string, ParagonThemeVariant>|undefined} themeVariants - An object where the keys are theme variant\n* names (e.g., \"light\", \"dark\") and the values are objects containing URLs for theme CSS files.\n* @param {Object} [options.themeVariantDefaults={}] - An object containing default theme variant preferences.\n*\n* @returns {Object|undefined} The default theme variant, or `undefined` if no valid theme variant is found.\n*\n*/\nexport const getDefaultThemeVariant = ({ themeVariants, themeVariantDefaults = {} }) => {\n  if (!themeVariants) {\n    return undefined;\n  }\n\n  const themeVariantKeys = Object.keys(themeVariants);\n\n  // If there is only one theme variant, return it since it's the only one that may be used.\n  if (themeVariantKeys.length === 1) {\n    const themeVariantKey = themeVariantKeys[0];\n    return {\n      name: themeVariantKey,\n      metadata: themeVariants[themeVariantKey],\n    };\n  }\n\n  // Prioritize persisted localStorage theme variant preference.\n  const persistedSelectedParagonThemeVariant = localStorage.getItem(SELECTED_THEME_VARIANT_KEY);\n  if (persistedSelectedParagonThemeVariant && themeVariants[persistedSelectedParagonThemeVariant]) {\n    return {\n      name: persistedSelectedParagonThemeVariant,\n      metadata: themeVariants[persistedSelectedParagonThemeVariant],\n    };\n  }\n\n  // Then, detect system preference via `prefers-color-scheme` media query and use\n  // the default dark theme variant, if one exists.\n  const hasDarkSystemPreference = !!window.matchMedia?.('(prefers-color-scheme: dark)')?.matches;\n  const defaultDarkThemeVariant = themeVariantDefaults.dark;\n  const darkThemeVariantMetadata = themeVariants[defaultDarkThemeVariant];\n\n  if (hasDarkSystemPreference && defaultDarkThemeVariant && darkThemeVariantMetadata) {\n    return {\n      name: defaultDarkThemeVariant,\n      metadata: darkThemeVariantMetadata,\n    };\n  }\n\n  const defaultLightThemeVariant = themeVariantDefaults.light;\n  const lightThemeVariantMetadata = themeVariants[defaultLightThemeVariant];\n\n  // Handle edge case where the default light theme variant is not configured or provided.\n  if (!defaultLightThemeVariant || !lightThemeVariantMetadata) {\n    return undefined;\n  }\n\n  // Otherwise, fallback to using the default light theme variant as configured.\n  return {\n    name: defaultLightThemeVariant,\n    metadata: lightThemeVariantMetadata,\n  };\n};\n\n/**\n * A custom React hook that manages the application's theme state and injects the appropriate CSS for the theme core\n * and theme variants (e.g., light and dark modes) into the HTML document. It handles dynamically loading the theme\n * CSS based on the current theme variant, and ensures that the theme variant's CSS is preloaded for runtime theme\n * switching.This is done using \"alternate\" stylesheets. That is, the browser will download the CSS for the\n * non-current theme variants with a lower priority than the current one.\n *\n * The hook also responds to system theme preference changes (e.g., via the `prefers-color-scheme` media query),\n * and can automatically switch the theme based on the system's dark mode or light mode preference.\n *\n * @memberof module:React\n *\n * @returns {Array} - An array containing:\n *  1. An object representing the current theme state.\n *  2. A dispatch function to mutate the app theme state (e.g., change the theme variant).\n *\n * * @example\n * const [themeState, dispatch] = useParagonTheme();\n * console.log(themeState.isThemeLoaded); // true when the theme has been successfully loaded.\n *\n * // Dispatch an action to change the theme variant\n * dispatch(paragonThemeActions.setParagonThemeVariant('dark'));\n */\nconst useParagonTheme = () => {\n  const paragonThemeUrls = useParagonThemeUrls();\n  const {\n    core: themeCore,\n    defaults: themeVariantDefaults,\n    variants: themeVariants,\n  } = paragonThemeUrls || {};\n  const initialParagonThemeState = {\n    isThemeLoaded: false,\n    themeVariant: getDefaultThemeVariant({ themeVariants, themeVariantDefaults })?.name,\n  };\n  const [themeState, dispatch] = useReducer(paragonThemeReducer, initialParagonThemeState);\n\n  const [isCoreThemeLoaded, setIsCoreThemeLoaded] = useState(false);\n  const onLoadThemeCore = useCallback(() => {\n    setIsCoreThemeLoaded(true);\n  }, []);\n\n  const [hasLoadedThemeVariants, setHasLoadedThemeVariants] = useState(false);\n  const onLoadThemeVariants = useCallback(() => {\n    setHasLoadedThemeVariants(true);\n  }, []);\n\n  // load the core theme CSS\n  useParagonThemeCore({\n    themeCore,\n    onComplete: onLoadThemeCore,\n  });\n\n  // respond to system preference changes with regard to `prefers-color-scheme: dark`.\n  const handleDarkModeSystemPreferenceChange = useCallback((prefersDarkMode) => {\n    // Ignore system preference change if the theme variant is already set in localStorage.\n    if (localStorage.getItem(SELECTED_THEME_VARIANT_KEY)) {\n      return;\n    }\n\n    if (prefersDarkMode && themeVariantDefaults?.dark) {\n      dispatch(paragonThemeActions.setParagonThemeVariant(themeVariantDefaults.dark));\n    } else if (!prefersDarkMode && themeVariantDefaults?.light) {\n      dispatch(paragonThemeActions.setParagonThemeVariant(themeVariantDefaults.light));\n    } else {\n      logError(`Could not set theme variant based on system preference (prefers dark mode: ${prefersDarkMode})`, themeVariantDefaults, themeVariants);\n    }\n  }, [themeVariantDefaults, themeVariants]);\n\n  // load the theme variant(s) CSS\n  useParagonThemeVariants({\n    themeVariants,\n    onComplete: onLoadThemeVariants,\n    currentThemeVariant: themeState.themeVariant,\n    onDarkModeSystemPreferenceChange: handleDarkModeSystemPreferenceChange,\n  });\n\n  useEffect(() => {\n    // theme is already loaded, do nothing\n    if (themeState.isThemeLoaded) {\n      return;\n    }\n\n    const hasThemeConfig = (themeCore?.urls && !isEmptyObject(themeVariants));\n    if (!hasThemeConfig) {\n      // no theme URLs to load, set loading to false.\n      dispatch(paragonThemeActions.setParagonThemeLoaded(true));\n    }\n\n    // Return early if neither the core theme CSS nor any theme variant CSS is loaded.\n    if (!isCoreThemeLoaded || !hasLoadedThemeVariants) {\n      return;\n    }\n\n    // All application theme URLs are loaded\n    dispatch(paragonThemeActions.setParagonThemeLoaded(true));\n  }, [\n    themeState.isThemeLoaded,\n    isCoreThemeLoaded,\n    hasLoadedThemeVariants,\n    themeCore?.urls,\n    themeVariants,\n  ]);\n\n  return [themeState, dispatch];\n};\n\nexport default useParagonTheme;\n"],"mappings":"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","ignoreList":[]}