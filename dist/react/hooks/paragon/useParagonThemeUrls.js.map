{"version":3,"file":"useParagonThemeUrls.js","names":["useMemo","fallbackThemeUrl","isEmptyObject","getConfig","handleVersionSubstitution","_ref","url","wildcardKeyword","localVersion","includes","replaceAll","useParagonThemeUrls","_paragonThemeUrls$cor","_paragonThemeUrls$cor2","_paragonThemeUrls$cor3","_PARAGON_THEME","_PARAGON_THEME2","_getConfig","paragonThemeUrls","PARAGON_THEME_URLS","undefined","paragonCoreCssUrl","_typeof","core","urls","brandCoreCssUrl","brandOverride","defaultThemeVariants","defaults","localParagonVersion","PARAGON_THEME","paragon","version","localBrandVersion","brand","coreCss","themeVariantsCss","themeVariantsEntries","Object","entries","variants","forEach","_ref2","_ref3","_slicedToArray","themeVariant","_ref3$","themeVariantMetadata","_PARAGON_THEME$parago","_PARAGON_THEME$parago2","_PARAGON_THEME$parago3","localCoreUrl","themeUrls","localThemeVariants","localDefaultThemeVariants","fileName","_ref5","_ref6","_ref4","rest","_objectWithoutProperties","_excluded","_objectSpread"],"sources":["../../../../src/react/hooks/paragon/useParagonThemeUrls.js"],"sourcesContent":["import { useMemo } from 'react';\n\nimport { fallbackThemeUrl, isEmptyObject } from './utils';\nimport { getConfig } from '../../../config';\n\n/**\n * Replaces a wildcard in the URL string with a provided local version string.\n * This is typically used to substitute a version placeholder (e.g., `$paragonVersion`)\n * in URLs with actual version values.\n *\n * @param {Object} args - The arguments object for version substitution.\n * @param {string} args.url - The URL string that may contain a wildcard keyword (e.g., `$paragonVersion`).\n * @param {string} args.wildcardKeyword - The keyword (e.g., `$paragonVersion`) in the URL to be replaced\n * with the local version.\n * @param {string} args.localVersion - The local version string to replace the wildcard with.\n *\n * @returns {string} The URL with the wildcard keyword replaced by the provided version string.\n * If the conditions are not met (e.g., missing URL or version), the original URL is returned.\n *\n * @example\n * const url = 'https://cdn.example.com/$paragonVersion/theme.css';\n * const version = '1.0.0';\n * const updatedUrl = handleVersionSubstitution({ url, wildcardKeyword: '$paragonVersion', localVersion: version });\n * console.log(updatedUrl); // Outputs: 'https://cdn.example.com/1.0.0/theme.css'\n */\nexport const handleVersionSubstitution = ({ url, wildcardKeyword, localVersion }) => {\n  if (!url || !url.includes(wildcardKeyword) || !localVersion) {\n    return url;\n  }\n  return url.replaceAll(wildcardKeyword, localVersion);\n};\n\n/**\n * Custom React hook that retrieves the Paragon theme URLs, including the core theme CSS and any theme variants.\n * It supports version substitution for the Paragon and brand versions and returns a structured object containing\n * the URLs. The hook also handles fallback scenarios when the URLs are unavailable in the configuration or when\n * version substitution is required.\n *\n * @returns {Object|undefined} An object containing:\n *   - `core`: The core theme URLs (including default and brand override).\n *   - `defaults`: Any default theme variants.\n *   - `variants`: The URLs for any additional theme variants (default and brand override).\n *\n *   If the required URLs are not available or cannot be determined, `undefined` is returned.\n *\n * @example\n * const themeUrls = useParagonThemeUrls();\n * if (themeUrls) {\n *   console.log(themeUrls.core.urls.default); // Outputs the URL of the core theme CSS\n *   console.log(themeUrls.variants['dark'].urls.default); // Outputs the URL of the dark theme variant CSS\n * }\n *\n */\nconst useParagonThemeUrls = () => useMemo(() => {\n  const { PARAGON_THEME_URLS: paragonThemeUrls } = getConfig();\n  if (!paragonThemeUrls) {\n    return undefined;\n  }\n\n  const paragonCoreCssUrl = typeof paragonThemeUrls?.core?.urls === 'object' ? paragonThemeUrls.core.urls.default : paragonThemeUrls?.core?.url;\n  const brandCoreCssUrl = typeof paragonThemeUrls?.core?.urls === 'object' ? paragonThemeUrls.core.urls.brandOverride : undefined;\n  const defaultThemeVariants = paragonThemeUrls.defaults;\n\n  // Local versions of @openedx/paragon and @edx/brand\n  // these are only used when passed into handleVersionSubstitution\n  // which does not attempt substitution using falsy value\n  const localParagonVersion = PARAGON_THEME?.paragon?.version;\n  const localBrandVersion = PARAGON_THEME?.brand?.version;\n\n  const coreCss = {\n    default: handleVersionSubstitution({ url: paragonCoreCssUrl, wildcardKeyword: '$paragonVersion', localVersion: localParagonVersion }),\n    brandOverride: handleVersionSubstitution({ url: brandCoreCssUrl, wildcardKeyword: '$brandVersion', localVersion: localBrandVersion }),\n  };\n  const themeVariantsCss = {};\n  const themeVariantsEntries = Object.entries(paragonThemeUrls.variants || {});\n  themeVariantsEntries.forEach(([themeVariant, { url, urls }]) => {\n    const themeVariantMetadata = { urls: null };\n    if (url) {\n      themeVariantMetadata.urls = {\n        default: handleVersionSubstitution({\n          url,\n          wildcardKeyword: '$paragonVersion',\n          localVersion: localParagonVersion,\n        }),\n      };\n    } else {\n      themeVariantMetadata.urls = {\n        default: handleVersionSubstitution({\n          url: urls.default,\n          wildcardKeyword: '$paragonVersion',\n          localVersion: localParagonVersion,\n        }),\n        brandOverride: handleVersionSubstitution({\n          url: urls.brandOverride,\n          wildcardKeyword: '$brandVersion',\n          localVersion: localBrandVersion,\n        }),\n      };\n    }\n    themeVariantsCss[themeVariant] = themeVariantMetadata;\n  });\n\n  // If we don't have  the core default or any theme variants, use the PARAGON_THEME\n  if (!coreCss.default || isEmptyObject(themeVariantsCss) || isEmptyObject(defaultThemeVariants)) {\n    const localCoreUrl = PARAGON_THEME.paragon?.themeUrls?.core;\n    const localThemeVariants = PARAGON_THEME.paragon?.themeUrls?.variants;\n    const localDefaultThemeVariants = PARAGON_THEME.paragon?.themeUrls?.defaults;\n\n    if (isEmptyObject(localCoreUrl) || isEmptyObject(localThemeVariants)) {\n      return undefined;\n    }\n    if (!coreCss.default) {\n      coreCss.default = fallbackThemeUrl(localCoreUrl?.fileName);\n    }\n\n    if (isEmptyObject(themeVariantsCss)) {\n      Object.entries(localThemeVariants).forEach(([themeVariant, { fileName, ...rest }]) => {\n        themeVariantsCss[themeVariant] = {\n          urls: { default: fallbackThemeUrl(fileName), ...rest.urls },\n        };\n      });\n    }\n    return {\n      core: { urls: coreCss },\n      defaults: defaultThemeVariants || localDefaultThemeVariants,\n      variants: themeVariantsCss,\n    };\n  }\n\n  return {\n    core: { urls: coreCss },\n    defaults: defaultThemeVariants,\n    variants: themeVariantsCss,\n  };\n}, []);\n\nexport default useParagonThemeUrls;\n"],"mappings":"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","ignoreList":[]}